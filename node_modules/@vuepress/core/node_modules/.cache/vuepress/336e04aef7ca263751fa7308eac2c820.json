{"remainingRequest":"/Users/jack/Documents/GitHub/docs-info/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jack/Documents/GitHub/docs-info/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jack/Documents/GitHub/docs-info/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jack/Documents/GitHub/docs-info/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/jack/Documents/GitHub/docs-info/src/products copy/README.md?vue&type=template&id=37fa0518&","dependencies":[{"path":"/Users/jack/Documents/GitHub/docs-info/src/products copy/README.md","mtime":1623103817634},{"path":"/Users/jack/Documents/GitHub/docs-info/node_modules/cache-loader/dist/cjs.js","mtime":1619737538776},{"path":"/Users/jack/Documents/GitHub/docs-info/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1619737540834},{"path":"/Users/jack/Documents/GitHub/docs-info/node_modules/cache-loader/dist/cjs.js","mtime":1619737538776},{"path":"/Users/jack/Documents/GitHub/docs-info/node_modules/vue-loader/lib/index.js","mtime":1619737540834},{"path":"/Users/jack/Documents/GitHub/docs-info/node_modules/@vuepress/markdown-loader/index.js","mtime":1619737538380}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}