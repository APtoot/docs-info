{"remainingRequest":"/Users/jack/Documents/GitHub/docs-info/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jack/Documents/GitHub/docs-info/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jack/Documents/GitHub/docs-info/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jack/Documents/GitHub/docs-info/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/jack/Documents/GitHub/docs-info/src/risks/README copy.md?vue&type=template&id=bf0cf52c&","dependencies":[{"path":"/Users/jack/Documents/GitHub/docs-info/src/risks/README copy.md","mtime":1623883801112},{"path":"/Users/jack/Documents/GitHub/docs-info/node_modules/cache-loader/dist/cjs.js","mtime":1619737538776},{"path":"/Users/jack/Documents/GitHub/docs-info/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1619737540834},{"path":"/Users/jack/Documents/GitHub/docs-info/node_modules/cache-loader/dist/cjs.js","mtime":1619737538776},{"path":"/Users/jack/Documents/GitHub/docs-info/node_modules/vue-loader/lib/index.js","mtime":1619737540834},{"path":"/Users/jack/Documents/GitHub/docs-info/node_modules/@vuepress/markdown-loader/index.js","mtime":1619737538380}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}