{"remainingRequest":"/Users/jack/Documents/GitHub/docs-info/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jack/Documents/GitHub/docs-info/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jack/Documents/GitHub/docs-info/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jack/Documents/GitHub/docs-info/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/jack/Documents/GitHub/docs-info/src/Governance/Overview/README copy.md?vue&type=template&id=65e5f030&","dependencies":[{"path":"/Users/jack/Documents/GitHub/docs-info/src/Governance/Overview/README copy.md","mtime":1623884574000},{"path":"/Users/jack/Documents/GitHub/docs-info/node_modules/cache-loader/dist/cjs.js","mtime":1619737538776},{"path":"/Users/jack/Documents/GitHub/docs-info/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1619737540834},{"path":"/Users/jack/Documents/GitHub/docs-info/node_modules/cache-loader/dist/cjs.js","mtime":1619737538776},{"path":"/Users/jack/Documents/GitHub/docs-info/node_modules/vue-loader/lib/index.js","mtime":1619737540834},{"path":"/Users/jack/Documents/GitHub/docs-info/node_modules/@vuepress/markdown-loader/index.js","mtime":1619737538380}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJ0ZW1wbGF0ZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjdGVtcGxhdGUiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFRlbXBsYXRlIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2hlbiBtYWtpbmcgYSBwcm9wb3NhbCwgYmVnaW4gYnkgZ2F1Z2luZyBpbnRlcmVzdCBmb3IgeW91ciBpZGVhIGZyb20gdGhlIFJhcmkgQ2FwaXRhbCBjb21tdW5pdHkgb24gb3VyIHB1YmxpYyBmb3J1bXMsIERpc2NvcmQsIG9yIFR3aXR0ZXIuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICBfdm0uX3YoIlBsZWFzZSBmb2xsb3cgdGhlIHRlbXBsYXRlIGJlbG93IGZvciBhbGwgZm9ydW0gcG9zdHM6IikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJTdW1tYXJ5OiIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBBIHNpbXBsZSBkZXNjcmlwdGlvbiBvZiB0aGUgcHJvcG9zYWwncyBlbmQgcmVzdWx0IGFuZCBkZXNpcmVkIGNoYW5nZTsgc2hvdWxkIGJlIG5vIG1vcmUgdGhhbiBhIGZldyBzdWNjaW5jdCBzZW50ZW5jZXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiKkJhY2tncm91bmQ6KipQcm92aWRlIGNvbnRleHQgdG8gdGhlIHByb2JsZW0geW91ciBwcm9wb3NhbCB3aXNoZXMgdG8gYWRkcmVzcyBvciB0byB0aGUgYXJlYSBvZiB0aGUgcHJvdG9jb2wgeW91IGludGVuZCB0byBpbXByb3ZlLiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIqQWJzdHJhY3Q6KipDbGVhcmx5IGRlc2NyaWJlIGhvdyB0aGUgcHJvcG9zYWwgd2lzaGVzIHRvIGNoYW5nZS9pbXByb3ZlIHRoZSBwcm90b2NvbC4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCIqTW90aXZhdGlvbjoqKkV4cGxhaW4gIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigid2h5IildKSwKICAgICAgICAgIF92bS5fdigiIHRoaXMgcHJvcG9zYWwgaXMgbmVjZXNzYXJ5IG9yIHVzZWZ1bCBmb3IgdGhlIHByb3RvY29sLiIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRm9yOiIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBJbGx1c3RyYXRlIGluIG9uZSBvciB0d28gc2VudGVuY2VzIHdoYXQgdGhpcyBwb3NpdGlvbiBzdXBwb3J0cyIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkFnYWluc3Q6IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIElsbHVzdHJhdGUgaW4gb25lIG9yIHR3byBzZW50ZW5jZXMgd2hhdCB0aGlzIHBvc2l0aW9uIHN1cHBvcnRzIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAicmFyaS1jYXBpdGFsLWRhby1pbXByb3ZlbWVudC1wcm9wb3NhbHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3JhcmktY2FwaXRhbC1kYW8taW1wcm92ZW1lbnQtcHJvcG9zYWxzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUmFyaSBDYXBpdGFsIERBTyBJbXByb3ZlbWVudCBQcm9wb3NhbHMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUbyBwb3N0IGFuZCBmb3JtdWxhdGUgYSBnb3Zlcm5hbmNlIHByb3Bvc2FsIGZvciB0aGUgUmFyaSBDYXBpdGFsIERBTywgdXNlcnMgbXVzdCBmb2xsb3cgYSBzcGVjaWZpYyB0ZW1wbGF0ZSBhbmQgZm9sbG93IGFsbCBkaXJlY3Rpb25zIG9uIHRoZSBhY2NvcmRpbmcgbGlua3M6IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiU3RhcnQgdGhlIGNvbnZlcnNhdGlvbiBvbiBEaXNjb3JkOiBodHRwczovL2Rpc2NvcmQuZ2cvbXRiNlc1N0FwNiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICdQb3N0IGZpbmFsIHByb3Bvc2FsIHRvICJSYXJpIENhcGl0YWwgREFPIEltcHJvdmVtZW50IFByb3Bvc2FscyI6IGh0dHBzOi8vZm9ydW1zLnJhcmkuY2FwaXRhbC90L3JhcmktY2FwaXRhbC1kYW8taW1wcm92ZW1lbnQtcHJvcG9zYWxzIGFuZCBkaXNjdXNzIHRoZXJlIGZvciAyIGRheXMnCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiUG9zdCB0byBSYXJpIENhcGl0YWwgREFPIFNuYXBzaG90IHBhZ2UgdG8gY2FzdCB0aGUgZmluYWwgdm90ZTogaHR0cHM6Ly92b3RlLnJhcmkuY2FwaXRhbC8jLyBhbmQgbGVhdmUgdm90aW5nIG9wZW4gZm9yIDIgZGF5cyIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJyYXJpLWNhcGl0YWwtZGFvLWZ1c2UtcG9vbC1wcm9wb3NhbHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3JhcmktY2FwaXRhbC1kYW8tZnVzZS1wb29sLXByb3Bvc2FscyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFJhcmkgQ2FwaXRhbCBEQU8gRnVzZSBQb29sIFByb3Bvc2FscyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRvIHBvc3QgYW5kIGZvcm11bGF0ZSBhIGdvdmVybmFuY2UgcHJvcG9zYWwgZm9yIHRoZSBSYXJpIENhcGl0YWwgREFPIEZ1c2UgUG9vbHMsIHVzZXJzIG11c3QgZm9sbG93IGEgc3BlY2lmaWMgdGVtcGxhdGUgYW5kIGZvbGxvdyBhbGwgZGlyZWN0aW9ucyBvbiB0aGUgYWNjb3JkaW5nIGxpbmtzOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlN0YXJ0IHRoZSBjb252ZXJzYXRpb24gb24gRGlzY29yZDogaHR0cHM6Ly9kaXNjb3JkLmdnL210YjZXNTdBcDYiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAnUG9zdCBmaW5hbCBwcm9wb3NhbCB0byAiUmFyaSBDYXBpdGFsIERBTyBJbXByb3ZlbWVudCBQcm9wb3NhbHMiOiBodHRwczovL2ZvcnVtcy5yYXJpLmNhcGl0YWwvdC9yYXJpLWNhcGl0YWwtZGFvLWZ1c2UtcG9vbC1wcm9wb3NhbHMgYW5kIGRpc2N1c3MgdGhlcmUgZm9yIDIgZGF5cycKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJQb3N0IHRvIFJhcmkgQ2FwaXRhbCBEQU8gU25hcHNob3QgcGFnZSB0byBjYXN0IHRoZSBmaW5hbCB2b3RlOiBodHRwczovL3ZvdGUucmFyaS5jYXBpdGFsLyMvIGFuZCBsZWF2ZSB2b3Rpbmcgb3BlbiBmb3IgMiBkYXlzIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}