{"remainingRequest":"/Users/jaibhavnani/Desktop/Git/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jaibhavnani/Desktop/Git/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jaibhavnani/Desktop/Git/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jaibhavnani/Desktop/Git/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/jaibhavnani/Desktop/Git/docs/docs/yag/README.md?vue&type=template&id=227eafc9&","dependencies":[{"path":"/Users/jaibhavnani/Desktop/Git/docs/docs/yag/README.md","mtime":1619323837694},{"path":"/Users/jaibhavnani/Desktop/Git/docs/node_modules/cache-loader/dist/cjs.js","mtime":1619077300192},{"path":"/Users/jaibhavnani/Desktop/Git/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1619077362344},{"path":"/Users/jaibhavnani/Desktop/Git/docs/node_modules/cache-loader/dist/cjs.js","mtime":1619077300192},{"path":"/Users/jaibhavnani/Desktop/Git/docs/node_modules/vue-loader/lib/index.js","mtime":1619077362344},{"path":"/Users/jaibhavnani/Desktop/Git/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1619077304147}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("h2", { attrs: { id: "yield-aggregator" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#yield-aggregator" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Yield Aggregator")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The yield aggregator is Rari's product that enables anyone to instantly deposit a supported asset and receive an interest generating one."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "r-x-pt-rari-x-pool-tokens" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#r-x-pt-rari-x-pool-tokens" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" R(X)PT (Rari (X) Pool Tokens)")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Each user's share of a Rari Pool is represented by their R(X)PT (Rari (X) Pool Token) balance, an example being the Rari Stable Pool being represented by RSPT aka Rari Stable Pool Token. When you deposit funds to a Rari Pool, an equivalent amount (value-wise) of pool tokens is minted to your account. When you withdraw funds from the pool, the equivalent amount of value in the pool token is burned from your account. As soon as you deposit, you start earning yield. Essentially, Rari pool tokens holdings and yield are split up across the pool token holders proportionally to their balances."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "deposits" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#deposits" } },
          [_vm._v("#")]
        ),
        _vm._v(" Deposits")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Only certain stablecoins are accepted for direct deposits (direct meaning without exchange to an accepted currency). To deposit another currency, you must exchange your funds before depositing. Fortunately, Rari can exchange and deposit your funds in the same transaction via "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://0x.org/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("0x"), _c("OutboundLink")],
          1
        ),
        _vm._v(" and/or "),
        _c(
          "a",
          {
            attrs: {
              href: "https://mstable.org/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("mStable"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " (please be aware that exchanges via 0x are subject to slippage due to price spread as well as an ETH protocol fee, and exchanges via mStable are subject to a small denominational percentage fee, but can avoid slippage and even get you a bonus)."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "See Contract Usage section below for more information on how to deposit via the smart contracts and API section below for a detailed reference on the smart contract methods involved. See the Rari SDK for easy implementation and the web client for easy usage."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "withdrawals" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#withdrawals" } },
          [_vm._v("#")]
        ),
        _vm._v(" Withdrawals")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Only the stablecoins currently held by the Rari Stable Pool are available for direct withdrawals. To withdraw another currency, you must exchange your funds after withdrawing. Fortunately, Rari can withdraw and exchange your funds in the same transaction via "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://0x.org/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("0x"), _c("OutboundLink")],
          1
        ),
        _vm._v(" and/or "),
        _c(
          "a",
          {
            attrs: {
              href: "https://mstable.org/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("mStable"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " (please be aware that exchanges via 0x are subject to slippage due to price spread as well as an ETH protocol fee, and exchanges via mStable are subject to a small denominational percentage fee, but can avoid slippage and even get you a bonus)."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "See the Contract Usage section belowfor more information on how to withdraw via the smart contracts and API section below for a detailed reference on the smart contract methods involved. See the Rari SDK for easy implementation and the web client for easy usage."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "structure" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#structure" } },
          [_vm._v("#")]
        ),
        _vm._v(" Structure")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The Rari Stable Pool is composed of 5 user-facing "),
        _c("strong", [_vm._v("smart contracts")]),
        _vm._v(" in total (see "),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://github.com/Rari-Capital/rari-stable-pool-contracts/blob/master/DEPLOYED.md",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_c("code", [_vm._v("DEPLOYED.md")]), _c("OutboundLink")],
          1
        ),
        _vm._v(" for deployed addresses):")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("RariFundManager")]),
          _vm._v(
            " is the Rari Stable Pool's main contract, handling deposits, withdrawals, USD balances, interest, fees, etc."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("RariFundController")]),
          _vm._v(
            " holds supplied funds and is used by the rebalancer to deposit and withdraw from pools and make exchanges."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("RariFundToken")]),
          _vm._v(
            " is the contract behind the Rari Stable Pool Token (RSPT), an ERC20 token used to internally account for the ownership of funds supplied to the Rari Stable Pool."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("RariFundPriceConsumer")]),
          _vm._v(
            " retrieves stablecoin prices from Chainlink's public price feeds (used by "
          ),
          _c("code", [_vm._v("RariFundManager")]),
          _vm._v(" and "),
          _c("code", [_vm._v("RariFundController")]),
          _vm._v(").")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("RariFundProxy")]),
          _vm._v(" includes wrapper functions built on top of "),
          _c("code", [_vm._v("RariFundManager")]),
          _vm._v(
            ": exchange and deposit, withdraw and exchange, and deposit without paying gas via the Gas Station Network (GSN)."
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("A "),
        _c("strong", [_vm._v("rebalancer")]),
        _vm._v(
          " controls which pools hold which currencies at any given time but only has permission to move funds between pools and exchange currencies, not withdraw funds elsewhere."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "security" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#security" } },
          [_vm._v("#")]
        ),
        _vm._v(" Security")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Rari's Ethereum-based smart contracts are written in Solidity and audited by "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://quantstamp.com/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("Quantstamp"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " (as well as various other partners) for security. Rari does not have control over your funds: instead, the Ethereum blockchain executes all secure code across its entire decentralized network (making it very difficult and extremely costly to rewrite history), and your funds are only withdrawable by you."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The rebalancer only has permission to move funds between pools and exchange currencies, not withdraw funds elsewhere. Losses due to exchange slippage in a 24-hour period are limited proportionally to the total supply for security since 0x orders can come from anywhere. However, the rebalancer can approve any amount of funds to the pools and exchanges integrated."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Please note that at the moment, smart contract upgrades are approved via a multisig federation controlled by various trusted parties. Each of the upgrades need to be voted on by governance at: vote.rari.capital for them to go live."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Please note that using our web client online at "),
        _c(
          "a",
          {
            attrs: {
              href: "https://app.rari.capital/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("app.rari.capital"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " is not nearly as trustworthy as downloading, verifying, and using it offline. Lastly, the rebalancer can only rebalance funds to different pools and currencies (with limits on slippage)."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "contract-usage" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#contract-usage" } },
          [_vm._v("#")]
        ),
        _vm._v(" Contract Usage")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The following document contains instructions on common usage of the Rari Stable Pool smart contracts' APIs."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("See API section below for a more detailed API reference on "),
          _c("code", [_vm._v("RariFundController")]),
          _vm._v(", "),
          _c("code", [_vm._v("RariFundManager")]),
          _vm._v(", "),
          _c("code", [_vm._v("RariFundToken")]),
          _vm._v(", "),
          _c("code", [_vm._v("RariFundPriceConsumer")]),
          _vm._v(", and "),
          _c("code", [_vm._v("RariFundProxy")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("See "),
          _c(
            "a",
            {
              attrs: {
                href: "https://eips.ethereum.org/EIPS/eip-20",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("EIP-20: ERC-20 Token Standard"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " for reference on all common functions of ERC20 tokens like RSPT."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Smart contract ABIs are available in the "),
          _c("code", [_vm._v("abi")]),
          _vm._v(" properties of the JSON files in the "),
          _c("code", [_vm._v("build")]),
          _vm._v(" folder.")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [
          _vm._v(
            "If you're using JavaScript, don't waste your time directly integrating our smart contracts: the "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/Rari-Capital/rari-sdk",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("Rari JavaScript SDK"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " makes programmatic deposits and withdrawals as easy as just one line of code!"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "stable-pool-apy" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#stable-pool-apy" } },
          [_vm._v("#")]
        ),
        _vm._v(" Stable Pool APY")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Get current raw APY (before fees):\n"),
          _c("ol", [
            _c("li", [
              _vm._v(
                "Get raw currency/subpool allocations (including unclaimed fees on interest): "
              ),
              _c("code", [
                _vm._v(
                  "(string[], uint256[], RariFundController.LiquidityPool[][], uint256[][], uint256[]) RariFundProxy.getRawFundBalancesAndPrices()"
                )
              ]),
              _vm._v(
                " returns an array of currency codes, an array of corresponding fund controller contract balances for each currency code, an array of arrays of pool indexes for each currency code, an array of arrays of corresponding balances at each pool index for each currency code, and an array of prices in USD (scaled by 1e18) for each currency code."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Multiply the APY of each pool of each currency by its fund controller balance (converted to USD)."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Divide the sum of these products by the sum of all fund controller contract balances and pool balances of each currency (converted to USD) to get the current Stable Pool APY."
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("strong", [_vm._v("Get current APY (after fees):")]),
          _vm._v(" subtract the product of the current raw APY and "),
          _c("code", [_vm._v("uint256 RariFundManager.getInterestFeeRate()")]),
          _vm._v(" divided by 1e18 from the current raw Stable Pool APY.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Get APY over time range (after fees):\n"),
          _c("ol", [
            _c("li", [
              _vm._v(
                "Get RSPT exchange rates at start and end of time range: divide "
              ),
              _c("code", [_vm._v("RariFundManager.getFundBalance()")]),
              _vm._v(" by "),
              _c("code", [_vm._v("RariFundToken.totalSupply()")]),
              _vm._v(
                " to get the exchange rate of RSPT in USD (scaled by 1e18)."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Divide the ending exchange rate by the starting exchange rate, raise this quotient to the power of 1 year divided by the length of the time range, and subtract one to get the Stable Pool APY over this time range."
              )
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "my-balance-and-interest" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#my-balance-and-interest" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" My Balance and Interest")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("strong", [_vm._v("Get my USD balance supplied:")]),
          _vm._v(" "),
          _c("code", [
            _vm._v("uint256 RariFundManager.balanceOf(address account)")
          ]),
          _vm._v(
            " returns the total balance in USD (scaled by 1e18) supplied to the Rari Stable Pool by "
          ),
          _c("code", [_vm._v("account")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("strong", [_vm._v("Get my interest accrued:")]),
          _vm._v(
            " Subtract total deposits and transfers in (in USD) and add total withdrawals and transfers out (in USD) from "
          ),
          _c("code", [
            _vm._v("uint256 RariFundManager.balanceOf(address account)")
          ]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "deposit" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#deposit" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Deposit")
      ]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [
          _c("p", [
            _vm._v(
              "User chooses to deposit one of our directly supported tokens (DAI, USDC, USDT, TUSD, BUSD, and sUSD), ETH, or one of the tokens listed by the 0x swap tokens API (see "
            ),
            _c(
              "a",
              {
                attrs: {
                  href: "https://0x.org/docs/api#get-swapv0tokens",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_vm._v("documentation"), _c("OutboundLink")],
              1
            ),
            _vm._v(" and "),
            _c(
              "a",
              {
                attrs: {
                  href: "https://api.0x.org/swap/v0/tokens",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_vm._v("endpoint"), _c("OutboundLink")],
              1
            ),
            _vm._v(
              ") in an amount no greater than the balance of their Ethereum account."
            )
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v("User calls "),
            _c("code", [
              _vm._v("string[] RariFundManager.getAcceptedCurrencies()")
            ]),
            _vm._v(
              " to get an array of currency codes currently accepted for direct deposit to the Stable Pool."
            )
          ]),
          _vm._v(" "),
          _c("ul", [
            _c("li", [
              _c("p", [_vm._v("If desired deposit currency is accepted:")]),
              _vm._v(" "),
              _c("ul", [
                _c("li", [
                  _c("p", [
                    _vm._v(
                      "Generally, user simply approves tokens and deposits them:"
                    )
                  ]),
                  _vm._v(" "),
                  _c("ol", [
                    _c("li", [
                      _vm._v("User approves tokens to "),
                      _c("code", [_vm._v("RariFundManager")]),
                      _vm._v(" by calling "),
                      _c("code", [
                        _vm._v("approve(address spender, uint256 amount)")
                      ]),
                      _vm._v(
                        " on the ERC20 contract of the desired input token where "
                      ),
                      _c("code", [_vm._v("spender")]),
                      _vm._v(" is "),
                      _c("code", [_vm._v("RariFundManager")]),
                      _vm._v(" (to approve unlimited funds, set "),
                      _c("code", [_vm._v("amount")]),
                      _vm._v(" to "),
                      _c("code", [_vm._v("uint256(-1)")]),
                      _vm._v(").")
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _vm._v("Deposit with "),
                      _c("code", [
                        _vm._v(
                          "bool RariFundManager.deposit(string currencyCode, uint256 amount)"
                        )
                      ])
                    ])
                  ])
                ]),
                _vm._v(" "),
                _c("li", [
                  _c("p", [
                    _vm._v(
                      "To avoid paying gas, if the user's Ethereum account has no past deposit, the deposit amount is >= 250 USD, and the ETH balance returned by"
                    )
                  ]),
                  _vm._v(" "),
                  _c("div", { staticClass: "language-solidity extra-class" }, [
                    _c(
                      "pre",
                      { pre: true, attrs: { class: "language-solidity" } },
                      [
                        _c("code", [
                          _c(
                            "span",
                            { pre: true, attrs: { class: "token function" } },
                            [_vm._v("RelayHub")]
                          ),
                          _c(
                            "span",
                            {
                              pre: true,
                              attrs: { class: "token punctuation" }
                            },
                            [_vm._v("(")]
                          ),
                          _c(
                            "span",
                            { pre: true, attrs: { class: "token number" } },
                            [
                              _vm._v(
                                "0xd216153c06e857cd7f72665e0af1d7d82172f494"
                              )
                            ]
                          ),
                          _c(
                            "span",
                            {
                              pre: true,
                              attrs: { class: "token punctuation" }
                            },
                            [_vm._v(")")]
                          ),
                          _c(
                            "span",
                            {
                              pre: true,
                              attrs: { class: "token punctuation" }
                            },
                            [_vm._v(".")]
                          ),
                          _c(
                            "span",
                            { pre: true, attrs: { class: "token function" } },
                            [_vm._v("balanceOf")]
                          ),
                          _c(
                            "span",
                            {
                              pre: true,
                              attrs: { class: "token punctuation" }
                            },
                            [_vm._v("(")]
                          ),
                          _c(
                            "span",
                            { pre: true, attrs: { class: "token number" } },
                            [
                              _vm._v(
                                "0xb6b79d857858004bf475e4a57d4a446da4884866"
                              )
                            ]
                          ),
                          _c(
                            "span",
                            {
                              pre: true,
                              attrs: { class: "token punctuation" }
                            },
                            [_vm._v(")")]
                          ),
                          _vm._v("\n")
                        ])
                      ]
                    )
                  ]),
                  _c("p", [
                    _vm._v(
                      "is enough to cover the necessary gas, the user can submit their transaction via the Gas Station Network (GSN):"
                    )
                  ]),
                  _vm._v(" "),
                  _c("ol", [
                    _c("li", [
                      _c("p", [
                        _vm._v("User approves tokens to "),
                        _c("code", [_vm._v("RariFundProxy")]),
                        _vm._v(" by calling "),
                        _c("code", [
                          _vm._v("approve(address spender, uint256 amount)")
                        ]),
                        _vm._v(
                          " on the ERC20 contract of the desired input token where "
                        ),
                        _c("code", [_vm._v("spender")]),
                        _vm._v(" is "),
                        _c("code", [_vm._v("RariFundProxy")]),
                        _vm._v(" (to approve unlimited funds, set "),
                        _c("code", [_vm._v("amount")]),
                        _vm._v(" to "),
                        _c("code", [_vm._v("uint256(-1)")]),
                        _vm._v(").")
                      ])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _c("p", [
                        _vm._v(
                          "To get the necessary approval data (a signature from our trusted signer allowing the user to use our ETH for gas), POST the JSON body"
                        )
                      ]),
                      _vm._v(" "),
                      _c("div", { staticClass: "language-js extra-class" }, [
                        _c(
                          "pre",
                          { pre: true, attrs: { class: "language-js" } },
                          [
                            _c("code", [
                              _c(
                                "span",
                                {
                                  pre: true,
                                  attrs: { class: "token punctuation" }
                                },
                                [_vm._v("{")]
                              ),
                              _vm._v("\n  "),
                              _c(
                                "span",
                                {
                                  pre: true,
                                  attrs: { class: "token keyword" }
                                },
                                [_vm._v("from")]
                              ),
                              _c(
                                "span",
                                {
                                  pre: true,
                                  attrs: { class: "token punctuation" }
                                },
                                [_vm._v(",")]
                              ),
                              _vm._v("\n    to"),
                              _c(
                                "span",
                                {
                                  pre: true,
                                  attrs: { class: "token punctuation" }
                                },
                                [_vm._v(",")]
                              ),
                              _vm._v("\n    encodedFunctionCall"),
                              _c(
                                "span",
                                {
                                  pre: true,
                                  attrs: { class: "token punctuation" }
                                },
                                [_vm._v(",")]
                              ),
                              _vm._v("\n    txFee"),
                              _c(
                                "span",
                                {
                                  pre: true,
                                  attrs: { class: "token punctuation" }
                                },
                                [_vm._v(",")]
                              ),
                              _vm._v("\n    gasPrice"),
                              _c(
                                "span",
                                {
                                  pre: true,
                                  attrs: { class: "token punctuation" }
                                },
                                [_vm._v(",")]
                              ),
                              _vm._v("\n    gas"),
                              _c(
                                "span",
                                {
                                  pre: true,
                                  attrs: { class: "token punctuation" }
                                },
                                [_vm._v(",")]
                              ),
                              _vm._v("\n    nonce"),
                              _c(
                                "span",
                                {
                                  pre: true,
                                  attrs: { class: "token punctuation" }
                                },
                                [_vm._v(",")]
                              ),
                              _vm._v("\n    relayerAddress"),
                              _c(
                                "span",
                                {
                                  pre: true,
                                  attrs: { class: "token punctuation" }
                                },
                                [_vm._v(",")]
                              ),
                              _vm._v("\n    relayHubAddress\n"),
                              _c(
                                "span",
                                {
                                  pre: true,
                                  attrs: { class: "token punctuation" }
                                },
                                [_vm._v("}")]
                              ),
                              _vm._v("\n")
                            ])
                          ]
                        )
                      ]),
                      _c("p", [_vm._v("to")]),
                      _vm._v(" "),
                      _c("div", { staticClass: "language- extra-class" }, [
                        _c(
                          "pre",
                          { pre: true, attrs: { class: "language-text" } },
                          [
                            _c("code", [
                              _vm._v("https://app.rari.capital/checkSig.php\n")
                            ])
                          ]
                        )
                      ]),
                      _c("ul", [
                        _c("li", [
                          _vm._v("Note that "),
                          _c("code", [_vm._v("checkSig.php")]),
                          _vm._v(
                            " may go offline at some point in the future, in which case the user should deposit normally as described above."
                          )
                        ])
                      ])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _c("p", [
                        _vm._v("User calls "),
                        _c("code", [
                          _vm._v(
                            "bool RariFundProxy.deposit(string currencyCode, uint256 amount)"
                          )
                        ]),
                        _vm._v(" via the Gas Station Network (GSN).")
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("p", [
                _vm._v(
                  "If desired deposit currency is not accepted, get exchange data from mStable (preferably) and/or 0x:"
                )
              ]),
              _vm._v(" "),
              _c("ul", [
                _c("li", [
                  _c("p", [
                    _vm._v(
                      "If desired deposit currency is DAI, USDC, USDT, TUSD, or mUSD, until the user fulfills their entire deposit, exchange to any depositable currency among DAI, USDC, USDT, TUSD, or mUSD via mStable and deposit:"
                    )
                  ]),
                  _vm._v(" "),
                  _c("ol", [
                    _c("li", [
                      _vm._v("Get exchange data from mStable:\n"),
                      _c("ul", [
                        _c("li", [
                          _vm._v(
                            "If desired deposit currency is DAI, USDC, USDT, or TUSD, check "
                          ),
                          _c("code", [
                            _vm._v(
                              "(bool, string, uint256, uint256) MassetValidationHelper(0xabcc93c3be238884cc3309c19afd128fafc16911).getMaxSwap(0xe2f2a5c287993345a840db3b0845fbc70f5935a5, address _input, address _output)"
                            )
                          ]),
                          _vm._v(". If the first returned value is "),
                          _c("code", [_vm._v("true")]),
                          _vm._v(
                            ", the user can exchange a maximum input amount of the third returned value."
                          )
                        ]),
                        _vm._v(" "),
                        _c("li", [
                          _vm._v("If desired deposit currency is mUSD, check "),
                          _c("code", [
                            _vm._v(
                              "(bool, string, uint256 output, uint256 bassetQuantityArg) MassetValidationHelper(0xabcc93c3be238884cc3309c19afd128fafc16911).getRedeemValidity(0xabcc93c3be238884cc3309c19afd128fafc16911, uint256 _mAssetQuantity, address _outputBasset)"
                            )
                          ]),
                          _vm._v(". If the first returned value is "),
                          _c("code", [_vm._v("true")]),
                          _vm._v(
                            ", the user can exchange a maximum input amount of "
                          ),
                          _c("code", [_vm._v("bassetQuantityArg")]),
                          _vm._v(" (the fourth returned value).")
                        ])
                      ])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _vm._v("User calls "),
                      _c("code", [
                        _vm._v(
                          "bool RariFundProxy.exchangeAndDeposit(string inputCurrencyCode, uint256 inputAmount, string outputCurrencyCode)"
                        )
                      ]),
                      _vm._v(" to exchange and deposit.")
                    ])
                  ])
                ]),
                _vm._v(" "),
                _c("li", [
                  _c("p", [
                    _vm._v(
                      "If exchange via mStable is not possible (or if the user wants to exchange the rest of their deposit via 0x if mStable cannot exchange it all), retrieve order data from 0x:"
                    )
                  ]),
                  _vm._v(" "),
                  _c("ol", [
                    _c("li", [
                      _c("p", [
                        _vm._v(
                          "User retrieves data from 0x swap quote API (see "
                        ),
                        _c(
                          "a",
                          {
                            attrs: {
                              href: "https://0x.org/docs/api#get-swapv0quote",
                              target: "_blank",
                              rel: "noopener noreferrer"
                            }
                          },
                          [_vm._v("documentation"), _c("OutboundLink")],
                          1
                        ),
                        _vm._v(" and "),
                        _c(
                          "a",
                          {
                            attrs: {
                              href:
                                "https://api.0x.org/swap/v0/quote?sellToken=DAI&buyToken=USDC&sellAmount=1000000000000000000",
                              target: "_blank",
                              rel: "noopener noreferrer"
                            }
                          },
                          [_vm._v("endpoint"), _c("OutboundLink")],
                          1
                        ),
                        _vm._v(") where:")
                      ]),
                      _vm._v(" "),
                      _c("ul", [
                        _c("li", [
                          _c("code", [_vm._v("sellToken")]),
                          _vm._v(" is their input currency")
                        ]),
                        _vm._v(" "),
                        _c("li", [
                          _c("code", [_vm._v("buyToken")]),
                          _vm._v(
                            " is a directly depositable currency to which the desired deposit currency will be exchanged"
                          )
                        ]),
                        _vm._v(" "),
                        _c("li", [
                          _c("code", [_vm._v("sellAmount")]),
                          _vm._v(" is the input amount to be sent by the user")
                        ])
                      ])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _c("p", [
                        _vm._v("User approves tokens to "),
                        _c("code", [_vm._v("RariFundProxy")]),
                        _vm._v(" by calling "),
                        _c("code", [
                          _vm._v("approve(address spender, uint256 amount)")
                        ]),
                        _vm._v(
                          " on the ERC20 contract of the desired input token where "
                        ),
                        _c("code", [_vm._v("spender")]),
                        _vm._v(" is "),
                        _c("code", [_vm._v("RariFundProxy")]),
                        _vm._v(" (to approve unlimited funds, set "),
                        _c("code", [_vm._v("amount")]),
                        _vm._v(" to "),
                        _c("code", [_vm._v("uint256(-1)")]),
                        _vm._v(").")
                      ])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _c("p", [_vm._v("User calls")]),
                      _vm._v(" "),
                      _c(
                        "div",
                        { staticClass: "language-solidity extra-class" },
                        [
                          _c(
                            "pre",
                            {
                              pre: true,
                              attrs: { class: "language-solidity" }
                            },
                            [
                              _c("code", [
                                _c(
                                  "span",
                                  {
                                    pre: true,
                                    attrs: { class: "token builtin" }
                                  },
                                  [_vm._v("bool")]
                                ),
                                _vm._v(" RariFundProxy"),
                                _c(
                                  "span",
                                  {
                                    pre: true,
                                    attrs: { class: "token punctuation" }
                                  },
                                  [_vm._v(".")]
                                ),
                                _c(
                                  "span",
                                  {
                                    pre: true,
                                    attrs: { class: "token function" }
                                  },
                                  [_vm._v("exchangeAndDeposit")]
                                ),
                                _c(
                                  "span",
                                  {
                                    pre: true,
                                    attrs: { class: "token punctuation" }
                                  },
                                  [_vm._v("(")]
                                ),
                                _c(
                                  "span",
                                  {
                                    pre: true,
                                    attrs: { class: "token builtin" }
                                  },
                                  [_vm._v("address")]
                                ),
                                _vm._v(" inputErc20Contract"),
                                _c(
                                  "span",
                                  {
                                    pre: true,
                                    attrs: { class: "token punctuation" }
                                  },
                                  [_vm._v(",")]
                                ),
                                _vm._v(" "),
                                _c(
                                  "span",
                                  {
                                    pre: true,
                                    attrs: { class: "token builtin" }
                                  },
                                  [_vm._v("uint256")]
                                ),
                                _vm._v(" inputAmount"),
                                _c(
                                  "span",
                                  {
                                    pre: true,
                                    attrs: { class: "token punctuation" }
                                  },
                                  [_vm._v(",")]
                                ),
                                _vm._v(" "),
                                _c(
                                  "span",
                                  {
                                    pre: true,
                                    attrs: { class: "token builtin" }
                                  },
                                  [_vm._v("string")]
                                ),
                                _vm._v(" outputCurrencyCode"),
                                _c(
                                  "span",
                                  {
                                    pre: true,
                                    attrs: { class: "token punctuation" }
                                  },
                                  [_vm._v(",")]
                                ),
                                _vm._v(" LibOrder"),
                                _c(
                                  "span",
                                  {
                                    pre: true,
                                    attrs: { class: "token punctuation" }
                                  },
                                  [_vm._v(".")]
                                ),
                                _vm._v("Order"),
                                _c(
                                  "span",
                                  {
                                    pre: true,
                                    attrs: { class: "token punctuation" }
                                  },
                                  [_vm._v("[")]
                                ),
                                _c(
                                  "span",
                                  {
                                    pre: true,
                                    attrs: { class: "token punctuation" }
                                  },
                                  [_vm._v("]")]
                                ),
                                _vm._v(" orders"),
                                _c(
                                  "span",
                                  {
                                    pre: true,
                                    attrs: { class: "token punctuation" }
                                  },
                                  [_vm._v(",")]
                                ),
                                _vm._v(" "),
                                _c(
                                  "span",
                                  {
                                    pre: true,
                                    attrs: { class: "token builtin" }
                                  },
                                  [_vm._v("bytes")]
                                ),
                                _c(
                                  "span",
                                  {
                                    pre: true,
                                    attrs: { class: "token punctuation" }
                                  },
                                  [_vm._v("[")]
                                ),
                                _c(
                                  "span",
                                  {
                                    pre: true,
                                    attrs: { class: "token punctuation" }
                                  },
                                  [_vm._v("]")]
                                ),
                                _vm._v(" signatures"),
                                _c(
                                  "span",
                                  {
                                    pre: true,
                                    attrs: { class: "token punctuation" }
                                  },
                                  [_vm._v(",")]
                                ),
                                _vm._v(" "),
                                _c(
                                  "span",
                                  {
                                    pre: true,
                                    attrs: { class: "token builtin" }
                                  },
                                  [_vm._v("uint256")]
                                ),
                                _vm._v(" takerAssetFillAmount"),
                                _c(
                                  "span",
                                  {
                                    pre: true,
                                    attrs: { class: "token punctuation" }
                                  },
                                  [_vm._v(")")]
                                ),
                                _vm._v("\n")
                              ])
                            ]
                          )
                        ]
                      ),
                      _c("p", [_vm._v("where:")]),
                      _vm._v(" "),
                      _c("ul", [
                        _c("li", [
                          _c("code", [_vm._v("orders")]),
                          _vm._v(" is the orders array returned by the 0x API")
                        ]),
                        _vm._v(" "),
                        _c("li", [
                          _c("code", [_vm._v("signatures")]),
                          _vm._v(
                            " in an array of signatures from the orders array returned by the 0x API"
                          )
                        ]),
                        _vm._v(" "),
                        _c("li", [
                          _c("code", [_vm._v("takerAssetFillAmount")]),
                          _vm._v(" is the input amount sent by the user")
                        ])
                      ])
                    ])
                  ])
                ])
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "withdraw" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#withdraw" } },
          [_vm._v("#")]
        ),
        _vm._v(" Withdraw")
      ]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [
          _vm._v(
            "User ensures that their account possesses enough USD (represented internally by RSPT) to make their withdrawal."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("User calls "),
          _c("code", [
            _vm._v(
              "uint256 RariFundManager.getRawFundBalance(string currencyCode)"
            )
          ]),
          _vm._v(
            " to get the raw total balance (currently held by the Stable Pool and available for direct withdrawal) of the desired withdrawal currency.\n"
          ),
          _c("ul", [
            _c("li", [
              _vm._v(
                "If the returned balance >= withdrawal amount, user calls "
              ),
              _c("code", [
                _vm._v(
                  "bool RariFundManager.withdraw(string currencyCode, uint256 amount)"
                )
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("If returned balance < withdrawal amount:\n"),
              _c("ol", [
                _c("li", [
                  _vm._v(
                    "Until the whole withdrawal amount (including the directly withdrawable balance returned above) is filled, try to withdraw and exchange each of the other currencies held by the Stable Pool (DAI, USDC, USDT, TUSD, BUSD, sUSD, and mUSD) to the desired output currency:\n"
                  ),
                  _c("ol", [
                    _c("li", [
                      _vm._v("User calls "),
                      _c("code", [
                        _vm._v(
                          "uint256 RariFundManager.getRawFundBalance(string currencyCode)"
                        )
                      ]),
                      _vm._v(
                        " to get the raw total balance held by the Stable Pool of the potential input currency in question."
                      )
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _vm._v(
                        "Get exchange data from mStable (preferably) and/or 0x:\n"
                      ),
                      _c("ul", [
                        _c("li", [
                          _vm._v(
                            "If output currency is DAI, USDC, USDT, TUSD, or mUSD, get exchange data via mStable:\n"
                          ),
                          _c("ul", [
                            _c("li", [
                              _vm._v(
                                "If input currency is DAI, USDC, USDT, or TUSD, check "
                              ),
                              _c("code", [
                                _vm._v(
                                  "(bool, string, uint256, uint256) MassetValidationHelper(0xabcc93c3be238884cc3309c19afd128fafc16911).getMaxSwap(0xe2f2a5c287993345a840db3b0845fbc70f5935a5, address _input, address _output)"
                                )
                              ]),
                              _vm._v(". If the first returned value is "),
                              _c("code", [_vm._v("true")]),
                              _vm._v(
                                ", the user can exchange a maximum input amount of the third returned value."
                              )
                            ]),
                            _vm._v(" "),
                            _c("li", [
                              _vm._v("If input currency is mUSD, check "),
                              _c("code", [
                                _vm._v(
                                  "(bool, string, uint256 output, uint256 bassetQuantityArg) MassetValidationHelper(0xabcc93c3be238884cc3309c19afd128fafc16911).getRedeemValidity(0xabcc93c3be238884cc3309c19afd128fafc16911, uint256 _mAssetQuantity, address _outputBasset)"
                                )
                              ]),
                              _vm._v(". If the first returned value is "),
                              _c("code", [_vm._v("true")]),
                              _vm._v(
                                ", the user can exchange a maximum input amount of "
                              ),
                              _c("code", [_vm._v("bassetQuantityArg")]),
                              _vm._v(" (the fourth returned value).")
                            ])
                          ])
                        ]),
                        _vm._v(" "),
                        _c("li", [
                          _vm._v(
                            "If exchange via mStable is not possible (or if the user wants to exchange additional funds via 0x if mStable cannot exchange it all), retrieve order data from 0x:\n"
                          ),
                          _c("ul", [
                            _c("li", [
                              _vm._v(
                                "If the raw total balance of this input currency is enough to cover the remaining withdrawal amount, user retrieves data from the 0x swap quote API (see "
                              ),
                              _c(
                                "a",
                                {
                                  attrs: {
                                    href:
                                      "https://0x.org/docs/api#get-swapv0quote",
                                    target: "_blank",
                                    rel: "noopener noreferrer"
                                  }
                                },
                                [_vm._v("documentation"), _c("OutboundLink")],
                                1
                              ),
                              _vm._v(" and "),
                              _c(
                                "a",
                                {
                                  attrs: {
                                    href:
                                      "https://api.0x.org/swap/v0/quote?sellToken=DAI&buyToken=USDC&sellAmount=1000000000000000000",
                                    target: "_blank",
                                    rel: "noopener noreferrer"
                                  }
                                },
                                [_vm._v("endpoint"), _c("OutboundLink")],
                                1
                              ),
                              _vm._v(") where:\n"),
                              _c("ul", [
                                _c("li", [
                                  _c("code", [_vm._v("sellToken")]),
                                  _vm._v(
                                    " is the input currency to be directly withdrawn from the Stable Pool"
                                  )
                                ]),
                                _vm._v(" "),
                                _c("li", [
                                  _c("code", [_vm._v("buyToken")]),
                                  _vm._v(
                                    " is the output currency to be sent to the user"
                                  )
                                ]),
                                _vm._v(" "),
                                _c("li", [
                                  _c("code", [_vm._v("buyAmount")]),
                                  _vm._v(
                                    " is the amount of output currency to be sent to the user in this exchange only"
                                  )
                                ])
                              ])
                            ])
                          ])
                        ])
                      ])
                    ])
                  ])
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("User calls "),
                  _c("code", [
                    _vm._v(
                      "bool RariFundProxy.withdrawAndExchange(string[] inputCurrencyCodes, uint256[] inputAmounts, address outputErc20Contract, LibOrder.Order[][] orders, bytes[][] signatures, uint256[] makerAssetFillAmounts, uint256[] protocolFees)"
                    )
                  ]),
                  _vm._v(" where:\n"),
                  _c("ol", [
                    _c("li", [
                      _vm._v(
                        "inputCurrencyCodes is an array of input currency codes\n"
                      ),
                      _c("ol", [
                        _c("li", [
                          _vm._v(
                            "To directly withdraw the output currency without exchange in the same transaction, simply include the output currency code in "
                          ),
                          _c("code", [_vm._v("inputCurrencyCodes")]),
                          _vm._v(".")
                        ])
                      ])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _c("code", [_vm._v("inputAmounts")]),
                      _vm._v(" is an array of input currency amounts\n"),
                      _c("ol", [
                        _c("li", [
                          _vm._v(
                            "To directly withdraw as much of the output currency without exchange in the same transaction, set the corresponding "
                          ),
                          _c("code", [_vm._v("inputAmounts")]),
                          _vm._v(
                            " item to the directly withdrawable raw total balance of that currency."
                          )
                        ])
                      ])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _c("code", [_vm._v("outputErc20Contract")]),
                      _vm._v(
                        " is the ERC20 token contract address of the output currency to be sent to the user"
                      )
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _c("code", [_vm._v("orders")]),
                      _vm._v(
                        " is an array of orders arrays returned by the 0x API\n"
                      ),
                      _c("ol", [
                        _c("li", [
                          _vm._v("To exchange one of "),
                          _c("code", [_vm._v("inputCurrencyCodes")]),
                          _vm._v(
                            " via mStable or to directly withdraw the output currency in the same transaction, set the corresponding "
                          ),
                          _c("code", [_vm._v("orders")]),
                          _vm._v(" item to an empty array.")
                        ])
                      ])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _c("code", [_vm._v("signatures")]),
                      _vm._v(
                        " is an array of arrays of signatures from the orders array returned by the 0x API\n"
                      ),
                      _c("ol", [
                        _c("li", [
                          _vm._v("To exchange one of "),
                          _c("code", [_vm._v("inputCurrencyCodes")]),
                          _vm._v(
                            " via mStable or to directly withdraw the output currency in the same transaction, set the corresponding "
                          ),
                          _c("code", [_vm._v("signatures")]),
                          _vm._v(" item to an empty array.")
                        ])
                      ])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _c("code", [_vm._v("makerAssetFillAmounts")]),
                      _vm._v(
                        " is an array of output currency amounts to be sent to the user\n"
                      ),
                      _c("ol", [
                        _c("li", [
                          _vm._v("To exchange one of "),
                          _c("code", [_vm._v("inputCurrencyCodes")]),
                          _vm._v(
                            " via mStable or to directly withdraw the output currency in the same transaction, set the corresponding "
                          ),
                          _c("code", [_vm._v("makerAssetFillAmounts")]),
                          _vm._v(" item to 0.")
                        ])
                      ])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _c("code", [_vm._v("protocolFees")]),
                      _vm._v(
                        " is an array of protocol fee amounts in ETH wei to be sent to 0x\n"
                      ),
                      _c("ol", [
                        _c("li", [
                          _vm._v("To exchange one of "),
                          _c("code", [_vm._v("inputCurrencyCodes")]),
                          _vm._v(
                            " via mStable instead of 0x or to directly withdraw the output currency in the same transaction, set the corresponding "
                          ),
                          _c("code", [_vm._v("protocolFees")]),
                          _vm._v(" item to 0.")
                        ])
                      ])
                    ])
                  ])
                ])
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "rspt-rari-stable-pool-token" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#rspt-rari-stable-pool-token" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" RSPT (Rari Stable Pool Token)")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "introduction" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#introduction" } },
          [_vm._v("#")]
        ),
        _vm._v(" Introduction")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Your RSPT (Rari Stable Pool Token) balance is a "),
        _c("em", [
          _vm._v("token-based representation of your Rari Stable Pool balance.")
        ])
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "RSPT is minted to you when you deposit to the Stable Pool and redeemed (i.e., burned) when you withdraw from the Stable Pool."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Accrued interest is constantly added to your USD balance supplied to the Stable Pool, meaning the USD value of your RSPT increases. However, your RSPT balance itself does not increase: instead, the exchange rate of RSPT increases at the same rate for every user as they accrue interest."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "When you transfer your RSPT, you transfer your holdings supplied to the Stable Pool (deposits + interest)."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "usage" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#usage" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Usage")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("strong", [_vm._v("Get RSPT exchange rate:")]),
          _vm._v(" Divide "),
          _c("code", [_vm._v("RariFundManager.getFundBalance()")]),
          _vm._v(" by "),
          _c("code", [_vm._v("RariFundToken.totalSupply()")]),
          _vm._v(" to get the exchange rate of RSPT in USD (scaled by 1e18).")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("strong", [
            _vm._v(
              "Get my RSPT balance (internal representation of my USD balance supplied):"
            )
          ]),
          _vm._v(" "),
          _c("code", [
            _vm._v("uint256 RariFundToken.balanceOf(address account)")
          ]),
          _vm._v(" returns the amount of RSPT owned by "),
          _c("code", [_vm._v("account")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("strong", [_vm._v("Transfer RSPT:")]),
          _vm._v(" "),
          _c("code", [
            _vm._v(
              "bool RariFundToken.transfer(address recipient, uint256 amount)"
            )
          ]),
          _vm._v(" transfers "),
          _c("code", [_vm._v("amount")]),
          _vm._v(" RSPT to "),
          _c("code", [_vm._v("recipient")]),
          _vm._v(" (as with other ERC20 tokens like RSPT).")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("strong", [_vm._v("Approve RSPT:")]),
          _vm._v(" "),
          _c("code", [
            _vm._v(
              "bool RariFundToken.approve(address spender, uint256 amount)"
            )
          ]),
          _vm._v(" approves "),
          _c("code", [_vm._v("spender")]),
          _vm._v(" to spend the specified "),
          _c("code", [_vm._v("amount")]),
          _vm._v(" of RSPT on behalf of "),
          _c("code", [_vm._v("msg.sender")]),
          _vm._v(" "),
          _c("ul", [
            _c("li", [
              _vm._v("As with the "),
              _c("code", [_vm._v("approve")]),
              _vm._v(
                " functions of other ERC20 contracts, beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729"
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("See "),
          _c(
            "a",
            {
              attrs: {
                href: "https://eips.ethereum.org/EIPS/eip-20",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("EIP-20: ERC-20 Token Standard"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " for reference on all common functions of ERC20 tokens like RSPT."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "total-supply-interest" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#total-supply-interest" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Total Supply & Interest")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("strong", [_vm._v("Get total USD supplied (by all users):")]),
          _vm._v(" "),
          _c("code", [_vm._v("uint256 RariFundManager.getFundBalance()")]),
          _vm._v(
            " returns the total balance supplied by users to the Rari Stable Pool (all RSPT holders' funds but not unclaimed fees) in USD (scaled by 1e18)."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("strong", [_vm._v("Get total interest accrued (by all users):")]),
          _vm._v(" "),
          _c("code", [_vm._v("int256 RariFundManager.getInterestAccrued()")]),
          _vm._v(
            " returns the total amount of interest accrued (excluding the fees paid on interest) by past and current Rari Stable Pool users (i.e., RSPT holders) in USD (scaled by 1e18)."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "fees" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#fees" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Fees")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("See "),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://www.notion.so/Fees-e4689d7b800f485098548dd9e9d0a69f",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("this Notion article"), _c("OutboundLink")],
          1
        ),
        _vm._v(" for the latest fee-related information.")
      ]),
      _vm._v(" "),
      _c("p", [_c("strong", [_vm._v("Performance Fees")])]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "This fee is liable to change in the future, but the following method returns its current value at any time."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Get interest fee rate: "),
          _c("code", [_vm._v("uint256 RariFundManager.getInterestFeeRate()")]),
          _vm._v(
            " returns the fee rate on interest (proportion of raw interest accrued scaled by 1e18)."
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_c("strong", [_vm._v("Withdrawal Fees")])]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "This fee is liable to change in the future, but the following method returns its current value at any time."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Get withdrawal fee rate: "),
          _c("code", [
            _vm._v("uint256 RariFundManager.getWithdrawalFeeRate()")
          ]),
          _vm._v(
            " returns the withdrawal fee rate (proportion of every withdrawal taken as a service fee scaled by 1e18)."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "raw-allocations" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#raw-allocations" } },
          [_vm._v("#")]
        ),
        _vm._v(" Raw Allocations")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("strong", [
            _vm._v(
              "Get raw currency/subpool allocations (including unclaimed fees on interest) and prices:"
            )
          ]),
          _vm._v(" "),
          _c("code", [
            _vm._v(
              "(string[], uint256[], RariFundController.LiquidityPool[][], uint256[][], uint256[]) RariFundProxy.getRawFundBalancesAndPrices()"
            )
          ]),
          _vm._v(
            " returns an array of currency codes, an array of corresponding fund controller contract balances for each currency code, an array of arrays of pool indexes for each currency code, an array of arrays of corresponding balances at each pool index for each currency code, and an array of prices in USD (scaled by 1e18) for each currency code."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "internal-stablecoin-pricing" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#internal-stablecoin-pricing" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Internal Stablecoin Pricing")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Get stablecoin prices (used internally by contracts): "),
          _c("code", [
            _vm._v("uint256[] RariFundPriceConsumer.getCurrencyPricesInUsd()")
          ]),
          _vm._v(
            " returns an array of prices in USD (scaled by 1e18) for all supported stablecoins to which funds can be allocated (DAI, USDC, USDT, TUSD, BUSD, sUSD, and mUSD, in that order).\n"
          ),
          _c("ul", [
            _c("li", [
              _vm._v(
                "Use these prices to calculate the value added to a user's USD balance due to a direct deposit and the value subtracted from a user's USD balance due to a direct withdrawal."
              )
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "api" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#api" } }, [
          _vm._v("#")
        ]),
        _vm._v(" API")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "user-balance-and-interest" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#user-balance-and-interest" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" User Balance and Interest")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" RariFundManager"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("balanceOf")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _vm._v(" account"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns the total balance in USD (scaled by 1e18) supplied to the Rari Stable Pool by "
        ),
        _c("code", [_vm._v("account")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("account")]),
              _vm._v(
                " (address) - The account whose balance we are calculating."
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Development notes:\n"),
          _c("ul", [
            _c("li", [
              _c("em", [
                _vm._v("Ideally, we can add the "),
                _c("code", [_vm._v("view")]),
                _vm._v(" modifier, but Compound's "),
                _c("code", [_vm._v("getUnderlyingBalance")]),
                _vm._v(" function (called by "),
                _c("code", [_vm._v("getRawFundBalance")]),
                _vm._v(") potentially modifies the state.")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "deposits-2" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#deposits-2" } },
          [_vm._v("#")]
        ),
        _vm._v(" Deposits")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bool")
            ]),
            _vm._v(" RariFundManager"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("isCurrencyAccepted")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("string")
            ]),
            _vm._v(" currencyCode"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("Returns a boolean indicating if deposits in "),
        _c("code", [_vm._v("currencyCode")]),
        _vm._v(" are currently accepted.")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("currencyCode")]),
              _vm._v(" (string): The currency code to check.")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("string")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" RariFundManager"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("getAcceptedCurrencies")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns an array of currency codes currently accepted for deposits."
        )
      ]),
      _vm._v(" "),
      _c("hr"),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _vm._v("RariFundProxy"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("deposit")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("string")
            ]),
            _vm._v(" currencyCode"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" amount"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _c("strong", [
          _c("em", [
            _vm._v("For the time being, we are no longer subsidizing gas fees.")
          ])
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Deposits funds to the Rari Stable Pool in exchange for RSPT (with GSN support)."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("You may only deposit currencies accepted by the fund (see "),
          _c("code", [
            _vm._v("RariFundManager.isCurrencyAccepted(string currencyCode)")
          ]),
          _vm._v(").")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Please note that you must approve RariFundProxy to transfer at least "
          ),
          _c("code", [_vm._v("amount")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("currencyCode")]),
              _vm._v(
                " (string): The currency code of the token to be deposited."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("amount")]),
              _vm._v(" (uint256): The amount of tokens to be deposited.")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _vm._v("RariFundManager"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("deposit")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("string")
            ]),
            _vm._v(" currencyCode"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" amount"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("Deposits funds to the Rari Stable Pool in exchange for RSPT.")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("You may only deposit currencies accepted by the fund (see "),
          _c("code", [
            _vm._v("RariFundManager.isCurrencyAccepted(string currencyCode)")
          ]),
          _vm._v("). However, "),
          _c("code", [_vm._v("RariFundProxy.exchangeAndDeposit")]),
          _vm._v(
            " exchanges your funds via 0x and deposits them in one transaction."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Please note that you must approve RariFundManager to transfer at least "
          ),
          _c("code", [_vm._v("amount")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("currencyCode")]),
              _vm._v(
                " (string): The currency code of the token to be deposited."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("amount")]),
              _vm._v(" (uint256): The amount of tokens to be deposited.")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _vm._v("RariFundProxy"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("exchangeAndDeposit")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _vm._v(" inputErc20Contract"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" inputAmount"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("string")
            ]),
            _vm._v(" outputCurrencyCode"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" LibOrder"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("Order"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" orders"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bytes")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" signatures"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" takerAssetFillAmount"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Exchanges and deposits funds to the Rari Stable Pool in exchange for RSPT (via 0x)."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("You can retrieve order data from the "),
          _c(
            "a",
            {
              attrs: {
                href: "https://0x.org/docs/api#get-swapv0quote",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("0x swap API"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ". See the Contract Usage section above, the SDK, or the web client for implementation."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Please note that you must approve RariFundProxy to transfer at least "
          ),
          _c("code", [_vm._v("inputAmount")]),
          _vm._v(" unless you are inputting ETH.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "You also must input at least enough ETH to cover the protocol fee (and enough to cover "
          ),
          _c("code", [_vm._v("orders")]),
          _vm._v(" if you are inputting ETH).")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("inputErc20Contract")]),
              _vm._v(
                " (address): The ERC20 contract address of the token to be exchanged. Set to address(0) to input ETH."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("inputAmount")]),
              _vm._v(
                " (uint256): The amount of tokens to be exchanged (including taker fees)."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("outputCurrencyCode")]),
              _vm._v(
                " (string): The currency code of the token to be deposited after exchange."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("orders")]),
              _vm._v(
                " (LibOrder.Order[]): The limit orders to be filled in ascending order of the price you pay."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("signatures")]),
              _vm._v(" (bytes[]): The signatures for the orders.")
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("takerAssetFillAmount")]),
              _vm._v(
                " (uint256): The amount of the taker asset to sell (excluding taker fees)."
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Development notes:\n"),
          _c("ul", [
            _c("li", [
              _c("em", [
                _vm._v(
                  "We should be able to make this function external and use calldata for all parameters, but "
                ),
                _c(
                  "a",
                  {
                    attrs: {
                      href: "https://github.com/ethereum/solidity/issues/5479",
                      target: "_blank",
                      rel: "noopener noreferrer"
                    }
                  },
                  [
                    _vm._v("Solidity does not support calldata structs"),
                    _c("OutboundLink")
                  ],
                  1
                ),
                _vm._v(".")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _vm._v("RariFundProxy"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("exchangeAndDeposit")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("string")
            ]),
            _vm._v(" inputCurrencyCode"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" inputAmount"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("string")
            ]),
            _vm._v(" outputCurrencyCode"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Exchanges and deposits funds to the Rari Stable Pool in exchange for RSPT (no slippage and low fees via mStable, but only supports DAI, USDC, USDT, TUSD, and mUSD)."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Please note that you must approve RariFundProxy to transfer at least "
          ),
          _c("code", [_vm._v("inputAmount")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("inputCurrencyCode")]),
              _vm._v(
                " (string): The currency code of the token to be exchanged."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("inputAmount")]),
              _vm._v(
                " (uint256): The amount of tokens to be exchanged (including taker fees)."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("outputCurrencyCode")]),
              _vm._v(
                " (string): The currency code of the token to be deposited after exchange."
              )
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "withdrawals-2" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#withdrawals-2" } },
          [_vm._v("#")]
        ),
        _vm._v(" Withdrawals")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _vm._v("RariFundManager"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("withdraw")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("string")
            ]),
            _vm._v(" currencyCode"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" amount"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Withdraws funds from the Rari Stable Pool in exchange for RSPT."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("You may only withdraw currencies held by the fund (see "),
          _c("code", [
            _vm._v("RariFundManager.getRawFundBalance(string currencyCode)")
          ]),
          _vm._v("). However, "),
          _c("code", [_vm._v("RariFundProxy.withdrawAndExchange")]),
          _vm._v(
            " withdraws your funds and exchanges them via 0x in one transaction."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Please note that you must approve RariFundManager to burn of the necessary amount of RSPT."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("currencyCode")]),
              _vm._v(
                " (string): The currency code of the token to be withdrawn."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("amount")]),
              _vm._v(" (uint256): The amount of tokens to be withdrawn.")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _vm._v("RariFundProxy"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("withdrawAndExchange")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("string")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" inputCurrencyCodes"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" inputAmounts"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _vm._v(" outputErc20Contract"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" LibOrder"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("Order"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" orders"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bytes")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" signatures"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" makerAssetFillAmounts"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" protocolFees"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Withdraws funds from the Rari Stable Pool in exchange for RSPT and exchanges to them to the desired currency (if no 0x orders are supplied, exchanges DAI, USDC, USDT, TUSD, and mUSD via mStable)."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("You can retrieve order data from the "),
          _c(
            "a",
            {
              attrs: {
                href: "https://0x.org/docs/api#get-swapv0quote",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("0x swap API"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ". See the Contract Usage section above, the SDK, or the web client for implementation."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Please note that you must approve RariFundManager to burn of the necessary amount of RSPT. You also must input at least enough ETH to cover the protocol fees."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("inputCurrencyCodes")]),
              _vm._v(
                " (string[]): The currency codes of the tokens to be withdrawn and exchanged.\n"
              ),
              _c("ul", [
                _c("li", [
                  _vm._v(
                    "To directly withdraw the output currency without exchange in the same transaction, simply include the output currency code in "
                  ),
                  _c("code", [_vm._v("inputCurrencyCodes")]),
                  _vm._v(".")
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("inputAmounts")]),
              _vm._v(
                " (uint256[]): The amounts of tokens to be withdrawn and exchanged (including taker fees).\n"
              ),
              _c("ul", [
                _c("li", [
                  _vm._v(
                    "To directly withdraw as much of the output currency without exchange in the same transaction, set the corresponding "
                  ),
                  _c("code", [_vm._v("inputAmounts")]),
                  _vm._v(
                    " item to the directly withdrawable raw fund balance of that currency."
                  )
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("outputErc20Contract")]),
              _vm._v(
                " (address): The ERC20 contract address of the token to be outputted by the exchange. Set to address(0) to output ETH."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("orders")]),
              _vm._v(
                " (LibOrder.Order[][]): The 0x limit orders to be filled in ascending order of the price you pay.\n"
              ),
              _c("ul", [
                _c("li", [
                  _vm._v("To exchange one of "),
                  _c("code", [_vm._v("inputCurrencyCodes")]),
                  _vm._v(
                    " via mStable or to directly withdraw the output currency in the same transaction, set the corresponding "
                  ),
                  _c("code", [_vm._v("orders")]),
                  _vm._v(" item to an empty array.")
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("signatures")]),
              _vm._v(" (bytes[][]): The signatures for the 0x orders.\n"),
              _c("ul", [
                _c("li", [
                  _vm._v("To exchange one of "),
                  _c("code", [_vm._v("inputCurrencyCodes")]),
                  _vm._v(
                    " via mStable or to directly withdraw the output currency in the same transaction, set the corresponding "
                  ),
                  _c("code", [_vm._v("signatures")]),
                  _vm._v(" item to an empty array.")
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("makerAssetFillAmounts")]),
              _vm._v(" (uint256[]): The amounts of the maker assets to buy.\n"),
              _c("ul", [
                _c("li", [
                  _vm._v("To exchange one of "),
                  _c("code", [_vm._v("inputCurrencyCodes")]),
                  _vm._v(
                    " via mStable or to directly withdraw the output currency in the same transaction, set the corresponding "
                  ),
                  _c("code", [_vm._v("makerAssetFillAmounts")]),
                  _vm._v(" item to 0.")
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("protocolFees")]),
              _vm._v(
                " (uint256[]): The protocol fees to pay to 0x in ETH for each order.\n"
              ),
              _c("ul", [
                _c("li", [
                  _vm._v("To exchange one of "),
                  _c("code", [_vm._v("inputCurrencyCodes")]),
                  _vm._v(
                    " via mStable instead of 0x or to directly withdraw the output currency in the same transaction, set the corresponding "
                  ),
                  _c("code", [_vm._v("protocolFees")]),
                  _vm._v(" item to 0.")
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Development notes:\n"),
          _c("ul", [
            _c("li", [
              _c("em", [
                _vm._v(
                  "We should be able to make this function external and use calldata for all parameters, but "
                ),
                _c(
                  "a",
                  {
                    attrs: {
                      href: "https://github.com/ethereum/solidity/issues/5479",
                      target: "_blank",
                      rel: "noopener noreferrer"
                    }
                  },
                  [
                    _vm._v("Solidity does not support calldata structs"),
                    _c("OutboundLink")
                  ],
                  1
                ),
                _vm._v(".")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "rspt" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#rspt" } }, [
          _vm._v("#")
        ]),
        _vm._v(" RSPT")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("See "),
        _c(
          "a",
          {
            attrs: {
              href: "https://eips.ethereum.org/EIPS/eip-20",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("EIP-20: ERC-20 Token Standard"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " for reference on all common functions of ERC20 tokens like RSPT. Here are a few of the most common ones:"
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" RariFundToken"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("balanceOf")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _vm._v(" account"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("Returns the amount of RSPT owned by "),
        _c("code", [_vm._v("account")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "A user's RSPT balance is an internal representation of their USD balance.\n"
          ),
          _c("ul", [
            _c("li", [
              _vm._v(
                "While a user's USD balance is constantly increasing as the Rari Stable Pool accrues interest, a user's RSPT balance does not change except on deposit, withdrawal, and transfer."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "The price of RSPT is equivalent to the current value of the first $1 USD deposited to the Rari Stable Pool."
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("account")]),
              _vm._v(
                " (address) - The account whose balance we are retrieving."
              )
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bool")
            ]),
            _vm._v(" RariFundToken"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("transfer")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _vm._v(" recipient"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" amount"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("Transfers the specified "),
        _c("code", [_vm._v("amount")]),
        _vm._v(" of RSPT to "),
        _c("code", [_vm._v("recipient")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("recipient")]),
              _vm._v(" (address): The recipient of the RSPT.")
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("inputAmounts")]),
              _vm._v(
                " (uint256[]): The amounts of tokens to be withdrawn and exchanged (including taker fees)."
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("RETURN")]),
          _vm._v(" value: Boolean indicating success.")
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bool")
            ]),
            _vm._v(" RariFundToken"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("approve")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _vm._v(" spender"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" amount"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("Approve "),
        _c("code", [_vm._v("sender")]),
        _vm._v(" to spend the specified "),
        _c("code", [_vm._v("amount")]),
        _vm._v(" of RSPT on behalf of "),
        _c("code", [_vm._v("msg.sender")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("As with the "),
          _c("code", [_vm._v("approve")]),
          _vm._v(
            " functions of other ERC20 contracts, beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("spender")]),
              _vm._v(
                " (address) - The account to which we are setting an allowance."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("amount")]),
              _vm._v(" (uint256) - The amount of the allowance to be set.")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("RETURN")]),
          _vm._v(" value: Boolean indicating success.")
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" RariFundToken"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("totalSupply")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [_vm._v("Returns the total supply of RSPT (scaled by 1e18).")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Divide "),
          _c("code", [_vm._v("RariFundManager.getFundBalance()")]),
          _vm._v(" by "),
          _c("code", [_vm._v("RariFundToken.totalSupply()")]),
          _vm._v(" to get the exchange rate of RSPT in USD (scaled by 1e18).")
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "total-supply-and-interest" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#total-supply-and-interest" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Total Supply and Interest")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" RariFundManager"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("getFundBalance")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns the total balance supplied by users to the Rari Stable Pool (all RSPT holders' funds but not unclaimed fees) in USD (scaled by 1e18)."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Development notes:\n"),
          _c("ul", [
            _c("li", [
              _c("em", [
                _vm._v("Ideally, we can add the "),
                _c("code", [_vm._v("view")]),
                _vm._v(" modifier, but Compound's "),
                _c("code", [_vm._v("getUnderlyingBalance")]),
                _vm._v(" function (called by "),
                _c("code", [_vm._v("getRawFundBalance")]),
                _vm._v(") potentially modifies the state.")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("int256")
            ]),
            _vm._v(" RariFundManager"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("getInterestAccrued")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns the total amount of interest accrued (excluding the fees paid on interest) by past and current Rari Stable Pool users (i.e., RSPT holders) in USD (scaled by 1e18)."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Development notes:\n"),
          _c("ul", [
            _c("li", [
              _c("em", [
                _vm._v("Ideally, we can add the "),
                _c("code", [_vm._v("view")]),
                _vm._v(" modifier, but Compound's "),
                _c("code", [_vm._v("getUnderlyingBalance")]),
                _vm._v(" function (called by "),
                _c("code", [_vm._v("getRawFundBalance")]),
                _vm._v(") potentially modifies the state.")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "fees-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#fees-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Fees")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" RariFundManager"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("getInterestFeeRate")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns the fee rate on interest (proportion of raw interest accrued scaled by 1e18)."
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("int256")
            ]),
            _vm._v(" RariFundManager"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("getInterestFeesGenerated")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns the amount of interest fees accrued by beneficiaries in USD (scaled by 1e18)."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Development notes:\n"),
          _c("ul", [
            _c("li", [
              _c("em", [
                _vm._v("Ideally, we can add the "),
                _c("code", [_vm._v("view")]),
                _vm._v(" modifier, but Compound's "),
                _c("code", [_vm._v("getUnderlyingBalance")]),
                _vm._v(" function (called by "),
                _c("code", [_vm._v("getRawFundBalance")]),
                _vm._v(") potentially modifies the state.")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" RariFundManager"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("getWithdrawalFeeRate")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns the withdrawal fee rate (proportion of every withdrawal taken as a service fee scaled by 1e18)."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "raw-total-supply-allocations-and-interest" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#raw-total-supply-allocations-and-interest" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Raw Total Supply, Allocations, and Interest")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" RariFundManager"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("getRawFundBalance")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns the raw total balance of the Rari Stable Pool (all RSPT holders' funds + all unclaimed fees) of all currencies in USD (scaled by 1e18)."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Development notes:\n"),
          _c("ul", [
            _c("li", [
              _c("em", [
                _vm._v("Ideally, we can add the "),
                _c("code", [_vm._v("view")]),
                _vm._v(" modifier, but Compound's "),
                _c("code", [_vm._v("getUnderlyingBalance")]),
                _vm._v(" function (called by "),
                _c("code", [_vm._v("getRawFundBalance")]),
                _vm._v(") potentially modifies the state.")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" RariFundManager"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("getRawFundBalance")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("string")
            ]),
            _vm._v(" currencyCode"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns the raw total balance of the Rari Stable Pool (all RSPT holders' funds + all unclaimed fees) of the specified currency."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("currencyCode")]),
              _vm._v(
                " (string): The currency code of the balance to be calculated."
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Development notes:\n"),
          _c("ul", [
            _c("li", [
              _c("em", [
                _vm._v("Ideally, we can add the "),
                _c("code", [_vm._v("view")]),
                _vm._v(" modifier, but Compound's "),
                _c("code", [_vm._v("getUnderlyingBalance")]),
                _vm._v(" function (called by "),
                _c("code", [_vm._v("RariFundController.getPoolBalance")]),
                _vm._v(") potentially modifies the state.")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("string")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" RariFundController"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("LiquidityPool"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" RariFundProxy"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("getRawFundBalancesAndPrices")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns the fund controller's contract balance of each currency, balance of each pool of each currency (checking "
        ),
        _c("code", [_vm._v("_poolsWithFunds")]),
        _vm._v(" first to save gas), and price of each currency.")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("RETURN")]),
          _vm._v(
            " values: An array of currency codes, an array of corresponding fund controller contract balances for each currency code, an array of arrays of pool indexes for each currency code, an array of arrays of corresponding balances at each pool index for each currency code, and an array of prices in USD (scaled by 1e18) for each currency code."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Development notes:\n"),
          _c("ul", [
            _c("li", [
              _c("em", [
                _vm._v("Ideally, we can add the "),
                _c("code", [_vm._v("view")]),
                _vm._v(" modifier, but Compound's "),
                _c("code", [_vm._v("getUnderlyingBalance")]),
                _vm._v(" function (called by "),
                _c("code", [_vm._v("getPoolBalance")]),
                _vm._v(") potentially modifies the state.")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("int256")
            ]),
            _vm._v(" RariFundManager"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("getRawInterestAccrued")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns the raw total amount of interest accrued by the Rari Stable Pool (including the fees paid on interest) in USD (scaled by 1e18)."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Development notes:\n"),
          _c("ul", [
            _c("li", [
              _c("em", [
                _vm._v("Ideally, we can add the "),
                _c("code", [_vm._v("view")]),
                _vm._v(" modifier, but Compound's "),
                _c("code", [_vm._v("getUnderlyingBalance")]),
                _vm._v(" function (called by "),
                _c("code", [_vm._v("getRawFundBalance")]),
                _vm._v(") potentially modifies the state.")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "internal-stablecoin-pricing-2" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#internal-stablecoin-pricing-2" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Internal Stablecoin Pricing")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" RariFundPriceConsumer"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("getCurrencyPricesInUsd")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns the prices of all supported stablecoins to which funds can be allocated."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Use these prices to calculate the value added to a user's USD balance due to a direct deposit and the value subtracted from a user's USD balance due to a direct withdrawal."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("RETURN")]),
          _vm._v(
            " value: An array of prices in USD (scaled by 1e18) corresponding to the following list of currencies in the following order: DAI, USDC, USDT, TUSD, BUSD, sUSD, and mUSD."
          )
        ])
      ])
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}