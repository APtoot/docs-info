{"remainingRequest":"/Users/jack/Documents/GitHub/docs-info/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jack/Documents/GitHub/docs-info/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jack/Documents/GitHub/docs-info/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jack/Documents/GitHub/docs-info/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/jack/Documents/GitHub/docs-info/src/products/tranches/tranches.md?vue&type=template&id=ba3146c0&","dependencies":[{"path":"/Users/jack/Documents/GitHub/docs-info/src/products/tranches/tranches.md","mtime":1623198576149},{"path":"/Users/jack/Documents/GitHub/docs-info/node_modules/cache-loader/dist/cjs.js","mtime":1619737538776},{"path":"/Users/jack/Documents/GitHub/docs-info/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1619737540834},{"path":"/Users/jack/Documents/GitHub/docs-info/node_modules/cache-loader/dist/cjs.js","mtime":1619737538776},{"path":"/Users/jack/Documents/GitHub/docs-info/node_modules/vue-loader/lib/index.js","mtime":1619737540834},{"path":"/Users/jack/Documents/GitHub/docs-info/node_modules/@vuepress/markdown-loader/index.js","mtime":1619737538380}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJ5aWVsZC1hZ2dyZWdhdG9yIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN5aWVsZC1hZ2dyZWdhdG9yIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgWWllbGQgQWdncmVnYXRvciIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBSYXJpIENhcGl0YWwgeWllbGQgYWdncmVnYXRvciBjb25zaXN0cyBvZiBhIHNlcmllcyBvZiB0aHJlZSBwb29scyB0aGF0IGFyZSBjb25zdGFudGx5IHNlYXJjaGluZyBmb3IgdGhlIGhpZ2hlc3QgeWllbGQgYXV0b25vbW91c2x5IGFjcm9zcyBEZUZpIGxlbmRpbmcgcHJvdG9jb2xzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImhvdy1kb2VzLXJhcmktY2FwaXRhbC1lYXJuLXlpZWxkIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNob3ctZG9lcy1yYXJpLWNhcGl0YWwtZWFybi15aWVsZCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEhvdyBkb2VzIFJhcmkgQ2FwaXRhbCBlYXJuIHlpZWxkPyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkN1cnJlbnRseSwgdGhlIHlpZWxkIGFnZ3JlZ2F0b3IgcHJvdG9jb2wgb3B0aW1pemVzIGZvciB5aWVsZCBhY3Jvc3MgYSBzZXJpZXMgb2Ygc3RhYmxlLWFzc2V0cyAoc3dhcHBpbmcgdmlhIDB4KSBpbiB0aGUgVVNEQyBhbmQgREFJIHBvb2xzLCBhbmQgRXRoZXJldW0gaW4gdGhlIEVUSCBwb29sLiBUaGUgcG9vbHMgZWFybiB1c2VycycgeWllbGQgYnkgbGVuZGluZyBhbmQgZmFybWluZyBhY3Jvc3MgdmFyaW91cyBEZUZpIHByb3RvY29scyBzdWNoIGFzIENvbXBvdW5kIEZpbmFuY2UsIGRZZFgsIEtlZXBlckRBTywgbVN0YWJsZSwgeUVhcm4sIEFhdmUsIGFuZCBub3cgRnVzZSBQb29scyEgV2UgYXJlIGFjdGl2ZWx5IGV4cGFuZGluZyBvdXIgc3RyYXRlZ3kgc2V0IHRvIGZvY3VzIG9uIG1vcmUgc3VzdGFpbmFibGUgeWllbGRzIG9mZiBvZiB0aGUgY2hhaW4uIFdlIGV4cGVjdCBsZW5kaW5nIHRvIGNvbXBvc2UgdGhlIG1pbm9yaXR5IG9mIHRoZSBwb29sJ3MgYWxsb2NhdGlvbiBvbmNlIG1hc3MgcHJvdG9jb2wgZXhwYW5zaW9uIGhhcyBiZWd1bi4gSW4gdGhlIGNvbWluZyBtb250aHMsIHdlIHdpbGwgYmUgZXhwbG9yaW5nIHVzaW5nIEZ1c2Ugc3RyYXRlZ2llcyBleGNsdXNpdmVseSBpbiB0aGUgeWllbGQgZWFybmluZyBwb29scy4gVGhpcyB3aWxsIGFsbG93IGZvciBhIG1vcmUgY29udHJvbGxlZCBlbnZpcm9ubWVudCBhcyB3ZWxsIGFzIHJlZHVjZSBzbWFydCBjb250cmFjdCByaXNrIGJ5IGludGVncmF0aW5nIGV4dGVybmFsIHN0cmF0ZWdpZXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAicmFyaS1jYXBpdGFsLXVzZGMtcG9vbCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcmFyaS1jYXBpdGFsLXVzZGMtcG9vbCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFJhcmkgQ2FwaXRhbCBVU0RDIFBvb2wiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgUmFyaSBDYXBpdGFsIFN0YWJsZSBQb29sIGFsbG93cyB1c2VycyB0byBkZXBvc2l0IEVUSCBvciBhbnkgRVJDMjAgdG9rZW4gdG8gbWludCB0aGUgbmF0aXZlIHRva2VuLCAkUlNQVC4gQWxsIEVSQzIwcyB3aWxsIGJlIHN3YXBwZWQgdG8gVVNEQyAobWVhbmluZyB0aGVyZSBpcyBzbGlwcGFnZSBmb3IgYWxsIGRlcG9zaXRzIGV4Y2VwdCBVU0RDKS4gT25jZSBhIHRva2VuIGhvbGRlciwgdGhlIFJhcmkgcHJvdG9jb2wgaXMgd29ya2luZyBhdXRvbm9tb3VzbHkgdG8gZGVsaXZlciB0aGUgaGlnaGVzdCB5aWVsZCBvbiB5b3VyIFVTREMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgICAgX3ZtLl92KCJMZW5kaW5nIFVTREMgb24gIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9jb21wb3VuZC5maW5hbmNlLyIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJDb21wb3VuZCBGaW5hbmNlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgIF92bS5fdigiTGVuZGluZyBVU0RDIG9uICIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vYWF2ZS5jb20vIiwKICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkFhdmUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgICAgX3ZtLl92KCJMZW5kaW5nIFVTREMgb24gIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9keWR4LmV4Y2hhbmdlLyIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJkWWRYIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgIF92bS5fdigiUHJvdmlkaW5nIGxpcXVpZGl0eSB0byAiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL21zdGFibGUub3JnLyIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJtU3RhYmxlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInJhcmktY2FwaXRhbC1kYWktcG9vbCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcmFyaS1jYXBpdGFsLWRhaS1wb29sIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUmFyaSBDYXBpdGFsIERBSSBQb29sIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIFJhcmkgQ2FwaXRhbCBEQUkgUG9vbCBhbGxvd3MgdXNlcnMgdG8gZGVwb3NpdCBEQUkgb3IgYW55IEVSQzIwIHRva2VuIHRvIG1pbnQgdGhlIG5hdGl2ZSB0b2tlbiwgJFJEUFQuIEFsbCBFUkMyMHMgd2lsbCBiZSBzd2FwcGVkIHRvIERBSSAobWVhbmluZyB0aGVyZSBpcyBzbGlwcGFnZSBmb3IgYWxsIGRlcG9zaXRzIGV4Y2VwdCBEQUkpLiBPbmNlIGEgdG9rZW4gaG9sZGVyLCB0aGUgUmFyaSBDYXBpdGFsIHByb3RvY29sIHdpbGwgd29yayBhdXRvbm9tb3VzbHkgdG8gZGVsaXZlciB0aGUgaGlnaGVzdCB5aWVsZCBvbiB5b3VyIERBSS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICBfdm0uX3YoIkxlbmRpbmcgREFJIG9uICIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vY29tcG91bmQuZmluYW5jZS8iLAogICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiQ29tcG91bmQgRmluYW5jZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICBfdm0uX3YoIkxlbmRpbmcgREFJIG9uICIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vYWF2ZS5jb20vIiwKICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkFhdmUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgICAgX3ZtLl92KCJMZW5kaW5nIERBSSBvbiAiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2R5ZHguZXhjaGFuZ2UvIiwKICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoImRZZFgiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgICAgX3ZtLl92KCJQcm92aWRpbmcgbGlxdWlkaXR5IHRvICIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vbXN0YWJsZS5vcmcvIiwKICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIm1TdGFibGUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAicmFyaS1jYXBpdGFsLWV0aC1wb29sIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNyYXJpLWNhcGl0YWwtZXRoLXBvb2wiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBSYXJpIENhcGl0YWwgRVRIIFBvb2wiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgUmFyaSBDYXBpdGFsIEVUSCBQb29sIGFsbG93cyBSYXJpIHVzZXJzIHRvIGRlcG9zaXQgRVRIIG9yIGFueSBFUkMyMCB0b2tlbnMgdG8gaW1tZWRpYXRlbHkgc3RhcnQgZWFybmluZyBpbnRlcmVzdCB0aHJvdWdoIHRoZSAkUkVQVC4gV2hpbGUgbWFpbnRhaW5pbmcgZXhwb3N1cmUgdG8gdGhlIHByaWNlIG9mIEVUSCwgdXNlcnMgYXJlIGVhcm5pbmcgeWllbGQgdGhyb3VnaCB2YXJpb3VzIG1lYW5zIGxpa2U6IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgICAgX3ZtLl92KCJFYXJuaW5nIHlpZWxkIGZyb20gbGlxdWlkYXRpb25zIChmYWNpbGl0YXRlZCBieSAiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2FwcC5rZWVwZXJkYW8uY29tLyIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJLZWVwZXJEQU8iKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiKSIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgIF92bS5fdigiTGVuZGluZyBEQUkgb24gIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9jb21wb3VuZC5maW5hbmNlLyIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJDb21wb3VuZCBGaW5hbmNlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgIF92bS5fdigiTGVuZGluZyBEQUkgb24gIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9hYXZlLmNvbS8iLAogICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiQWF2ZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICBfdm0uX3YoIkxlbmRpbmcgREFJIG9uICIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZHlkeC5leGNoYW5nZS8iLAogICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiZFlkWCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICBfdm0uX3YoIlByb3ZpZGluZyBsaXF1aWRpdHkgdG8gIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9tc3RhYmxlLm9yZy8iLAogICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigibVN0YWJsZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJZiB5b3UgYXJlIGludGVyZXN0ZWQgaW4gbGVhcm5pbmcgbW9yZSBhYm91dCBlYWNoIG9mIHRoZSBzdHJhdGVnaWVzIGFuZCBvdXIgZnJhbWV3b3JrIGZvciBpZGVudGlmeWluZyB3aGljaCBvbmVzIHRvIGltcGxlbWVudCwgY2hlY2sgaXQgb3V0ICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cubm90aW9uLnNvL1JhcmktU3RyYXRlZ3ktQXNzZXNzbWVudC1GcmFtZXdvcmstMmQxZWRmZmNmODBmNDc1MDk3M2Y2ZTkwZTk3YjcwYTQiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoImhlcmUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImhvdy10by1kZXBvc2l0IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNob3ctdG8tZGVwb3NpdCIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSG93IHRvIERlcG9zaXQiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJTdGVwIDE6IENvbm5lY3QgYSB3YWxsZXQiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIFJhcmkgUHJvdG9jb2wgY3VycmVudGx5IHN1cHBvcnRzIE1ldGFNYXNrLCBXYWxsZXRDb25uZWN0LCBQb3J0aXMsIFRvcnVzLCBGb3JtYXRpYywgYW5kIEF1dGhlcmV1bS4gSWYgeW91IGRvIG5vdCBoYXZlIGEgd2FsbGV0LCB3ZSByZWNvbW1lbmQgeW91IHJlZmVyIHRvICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZXRhbWFzay56ZW5kZXNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy8zNjAwMTU0ODk1MzEtR2V0dGluZy1TdGFydGVkLVdpdGgtTWV0YU1hc2stUGFydC0xIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJ0aGlzIGd1aWRlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnIGZvciBNZXRhTWFzay4gVXNlcnMgY2FuIGNvbm5lY3QgdGhlaXIgd2FsbGV0cyBieSBzZWxlY3RpbmcgdGhlICJDb25uZWN0IFdhbGxldCIgYnV0dG9uIG9uIHRoZSBSYXJpIENhcGl0YWwgQXBwIGxhbmRpbmcgcGFnZSBhdCAnCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly92Mi5yYXJpLmNhcGl0YWwvIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJ2Mi5yYXJpLmNhcGl0YWwiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIlN0ZXAgMjogQ2hvb3NlIGEgcG9vbCIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJPbmNlIGNvbm5lY3RlZCwgdXNlcnMgY2FuIHZpZXcgdGhlIG11bHRpLXBvb2wgZGFzaGJvYXJkLCBlcXVpcHBlZCB3aXRoIGEgY29tcGFyYXRpdmUgZ3JhcGggb2YgdGhlIHJldHVybnMgYmV0d2VlbiBlYWNoIHBvb2wuIFVzZXJzIG1heSB0aGVuIGRlcG9zaXQgaW50byB0aGUgcG9vbChzKSBvZiB0aGVpciBjaG9vc2luZyBieSBzZWxlY3RpbmcgdGhlIHRyYW5zYWN0aW9uIGJ1dHRvbiAodGhlIGJ1dHRvbiB3aXRoIHR3byBhcnJvd3MpLiBUaGlzIHdpbGwgcHJvbXB0IHRoZSBkZXBvc2l0IHdpbmRvdywgd2hlcmUgdXNlcnMgY2FuIHNlbGVjdCBhIHN1cHBvcnRlZCBhc3NldCBvZiB0aGVpciBjaG9pY2UgdG8gZGVwb3NpdC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJTdGVwIDM6IERlcG9zaXQgYSBzdXBwb3J0ZWQgYXNzZXQiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnQWZ0ZXIgY2hvb3NpbmcgYSBwb29sIGFuZCBzZWxlY3RpbmcgdGhlIGRlcG9zaXQgYnV0dG9uLCB1c2VycyBjYW4gdGhlbiBzZWxlY3QgYW55IG9mIHRoZSBzdXBwb3J0ZWQgY3J5cHRvLWFzc2V0cyBhbmQgZGVwb3NpdCB0aGVtIHdpdGhpbiB0aGUgcG9vbC4gVGhpcyBjYW4gYmUgZG9uZSBieSBzZWxlY3RpbmcgdGhlIGFzc2V0IG1lbnUsIGNob29zaW5nIHlvdXIgZGVzaXJlZCBhc3NldCwgaW5wdXR0aW5nIHlvdXIgZGVzaXJlZCBhbW91bnQsIG9yIGhpdHRpbmcgdGhlICJtYXgiIGJ1dHRvbiB0byBzZWxlY3QgdGhlIG1heGltdW0gYW1vdW50IGluIHlvdXIgd2FsbGV0LCBhbmQgaGl0dGluZyB0aGUgZGVwb3NpdCBidXR0b24uIEZvciBNZXRhTWFzayB1c2VycywgeW91IHdpbGwgdGhlbiByZWNlaXZlIGEgdHJhbnNhY3Rpb24gYXBwcm92YWwgd2luZG93LCB3aGVyZSBmaXJzdC10aW1lIHVzZXJzIG11c3QgYXBwcm92ZSBjb250cmFjdCBpbnRlcmFjdGlvbnMsIGFuZCBhbGwgdXNlcnMgbXVzdCBhcHByb3ZlIG9mIGluZGl2aWR1YWwgdHJhbnNhY3Rpb25zLicKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkl0IGlzIHdvcnRoIG5vdGluZyB0aGF0IGRlcG9zaXRpbmcgaW4gYSBjdXJyZW50bHkgYWN0aXZlIHRva2VuIHdpbGwgcmVxdWlyZSBsZXNzIGdhcyBmb3IgdGhlIHRyYW5zYWN0aW9uIHRoYW4gZGVwb3NpdGluZyBhbiBpbmFjdGl2ZSBhc3NldC4gVGhpcyBtZWFucyB0aGF0IGl0IHdpbGwgdXNlIG1vcmUgZ2FzIHRvIGRlcG9zaXQgYW4gaW5hY3RpdmUgYXNzZXQsIGFzIGl0IHdpbGwgYWxzbyBuZWVkIG1vcmUgc3dhcHMgdG8gcmVhY2ggYW4gYWN0aXZlIGFzc2V0LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFkZGl0aW9uYWxseSwgeW91IGFyZSBhYmxlIHRvIGRlcG9zaXQgaHVuZHJlZHMgb2YgZGlmZmVyZW50IGFzc2V0cyB0aGF0IHdpbGwgaW5zdGFudGx5IGJlIHN3YXBwZWQgb24gZGVwb3NpdCB0aHJvdWdoIG91ciBpbnRlZ3JhdGlvbiB3aXRoIDB4LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIlN0ZXAgNDogVHJhY2sgeW91ciBpbnRlcmVzdCBhY2NydWVkIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFmdGVyIGRlcG9zaXRpbmcsIHlvdXIgcmV0dXJucyBjYW4gYmUgdmlld2VkIGVpdGhlciB3aXRoaW4gdGhlIGluZGl2aWR1YWwgcG9vbCBkYXNoYm9hcmRzIG9yIG9uIHRoZSBtdWx0aS1wb29sIGRhc2hib2FyZCwgd2hlcmUgeW91IGNhbiByb3RhdGUgdGhyb3VnaCByZXR1cm5zIGFjcm9zcyB0aGUgZW50aXJlIHByb3RvY29sIGZvciB2YXJpb3VzIHRpbWUgcGVyaW9kcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJob3ctdG8td2l0aGRyYXciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2hvdy10by13aXRoZHJhdyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSG93IHRvIFdpdGhkcmF3IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygic3Ryb25nIiwgW192bS5fdigiU3RlcCAxOiBDb25uZWN0IGEgd2FsbGV0IildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ1RoZSBSYXJpIFByb3RvY29sIGN1cnJlbnRseSBzdXBwb3J0cyBNZXRhTWFzaywgV2FsbGV0Q29ubmVjdCwgUG9ydGlzLCBUb3J1cywgRm9ybWF0aWMsIGFuZCBBdXRoZXJldW0uIFVzZXJzIGNhbiBjb25uZWN0IHRoZWlyIHdhbGxldHMgYnkgc2VsZWN0aW5nIHRoZSAiQ29ubmVjdCBXYWxsZXQiIGJ1dHRvbiBvbiB0aGUgUmFyaSBDYXBpdGFsIEFwcCBsYW5kaW5nIHBhZ2UgYXQgJwogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHA6Ly9hcHAucmFyaS5jYXBpdGFsLyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiYXBwLnJhcmkuY2FwaXRhbCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi4gVGhpcyBhbGxvd3MgdXNlcnMgdG8gdmlldyBhbmQgaW50ZXJhY3Qgd2l0aCB0aGVpciBkZXBvc2l0ZWQgZnVuZHMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygic3Ryb25nIiwgW192bS5fdigiU3RlcCAyOiBDaG9vc2UgYSBwb29sIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk9uY2UgY29ubmVjdGVkLCB1c2VycyBjYW4gdmlldyB0aGUgbXVsdGktcG9vbCBkYXNoYm9hcmQuIFVzZXJzIG1heSB0aGVuIHdpdGhkcmF3IGZyb20gdGhlIHBvb2wocykgb2YgdGhlaXIgY2hvb3NpbmcgYnkgc2VsZWN0aW5nIHRoZSB0cmFuc2FjdGlvbiBidXR0b24gKHRoZSBidXR0b24gd2l0aCB0d28gYXJyb3dzKS4gVGhpcyB3aWxsIHByb21wdCBhIG5ldyB3aW5kb3cuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiU3RlcCAzOiBXaXRoZHJhdyBpbnRvIGEgc3VwcG9ydGVkIGFzc2V0IildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICdBZnRlciBjaG9vc2luZyBhIHBvb2wgYW5kIHNlbGVjdGluZyB0aGUgdHJhbnNhY3Rpb24gYnV0dG9uLCB1c2VycyBjYW4gdGhlbiB0b2dnbGUgdGhlIHdpdGhkcmF3YWwgZnVuY3Rpb24gd2l0aCB0aGUgZ2VhciBidXR0b24gaW4gdGhlIHRvcCByaWdodC4gVGhlbiwgc2VsZWN0IGFueSBvZiB0aGUgc3VwcG9ydGVkIGNyeXB0by1hc3NldHMgYW5kIHdpdGhkcmF3IGZyb20gdGhlIHBvb2wuIFRoaXMgY2FuIGJlIGRvbmUgYnkgc2VsZWN0aW5nIHRoZSBhc3NldCBtZW51LCBjaG9vc2luZyB5b3VyIGRlc2lyZWQgYXNzZXQsIHRoZSBhbW91bnQsIGFuZCBieSBwcmVzc2luZyB0aGUgIldpdGhkcmF3IiBidXR0b24uJwogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSXQgaXMgd29ydGggbm90aW5nIHRoYXQgaXQgd2lsbCBjb3N0IGxlc3MgZ2FzIHRvIHdpdGhkcmF3IGluIGFueSB0b2tlbnMgY3VycmVudGx5IGFjdGl2ZSB3aXRoaW4gdGhlIHByb3RvY29sLCBhcyBpdCB3aWxsIHJlcXVpcmUgZmV3ZXIgc3dhcHMuIENvbnZlcnNlbHksIHRoaXMgbWVhbnMgdGhhdCBpdCB3aWxsIHJlcXVpcmUgbW9yZSBnYXMgZm9yIHdpdGhkcmF3YWxzIGluIGFzc2V0cyBub3QgY3VycmVudGx5IGFjdGl2ZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJ0cmFuY2hlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjdHJhbmNoZXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFRyYW5jaGVzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIFJhcmkgQ2FwaXRhbCBEQUkgcG9vbCBpcyBpbnRlZ3JhdGVkIHdpdGhpbiBTYWZmcm9uIEZpbmFuY2UsIGEgcHJvdG9jb2wgcGlvbmVlcmluZyBpbiByaXNrIG1pdGlnYXRpb24gYW5kIHN0ZWFkeSBpbnRlcmVzdCByYXRlcyBhY3Jvc3MgRGVGaS4gVXNlcnMgd2hvIGRlcG9zaXQgaW50byB0aGVzZSB0cmFuY2hlcyByZWNlaXZlIGd1YXJhbnRlZCByYXRlcyBhcyB3ZWxsIGFzIFNGSSAoU2FmZnJvbidzIHRva2VuKSBlbW1pc3Npb25zIGFzIGFkZGVkIGluY2VudGl2ZXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAicG9vbDIiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3Bvb2wyIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgUG9vbDIiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgUmFyaSBDYXBpdGFsIERBTyBpcyBpbmNlbnRpemluZyBkZWNlbnRyYWxpemVkIGV4Y2hhbmdlIGxpcXVpZGl0eSBvZiBSR1Qgb24gU3VzaGlzd2FwLiBPbmNlIHlvdSBzdGFrZSBib3RoIFJHVCBhbmQgRVRIIG9uIFN1c2hpc3dhcCBpbiB0aGUgUkdULUVUSCBwb29sLCB5b3UgY2FuIHN0YWtlIHlvdXIgU0xQIHRva2VucyBvbiB0aGUgUG9vbDIgZGFzaGJvYXJkIHRvIGVhcm4gUkdUIHJld2FyZHMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZnVzZSIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZnVzZSIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIEZ1c2UiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJGdXNlIGlzIGFuIG9wZW4gaW50ZXJlc3QgcmF0ZSBwcm90b2NvbCB0aGF0IGFsbG93cyBEZUZpIHVzZXJzIHRvIGxlbmQgYW5kIGJvcnJvdyBFUkMyMCB0b2tlbnMuIFRoZSBGdXNlIHBsYXRmb3JtIGVuYWJsZXMgYW55b25lIHRvIGluc3RhbnRseSBjcmVhdGUgdGhlaXIgb3duIGxlbmRpbmcgYW5kIGJvcnJvd2luZyBwb29sLiBFYWNoIEZ1c2UgcG9vbCBpcyBlc3NlbnRpYWxseSBhIGZvcmsgb2YgdGhlIENvbXBvdW5kIEZpbmFuY2UgcHJvdG9jb2wuIFRoaXMgcHJvZHVjdCBhbGxvd3MgdXNlcnMgdG8gY2hvb3NlIGFsbCBvZiB0aGVpciBjdXN0b20gcGFyYW1ldGVycyBhbmQgaXNvbGF0ZSByaXNrLCByYXRlciB0aGFuIHVzaW5nIGEgbGFyZ2UgbGVuZGluZyBhbmQgYm9ycm93aW5nIHBvb2wgb24gb3RoZXIgcGxhdGZvcm1zLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIiIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}