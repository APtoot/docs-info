{"remainingRequest":"/Users/jaibhavnani/Desktop/Git/docs-info/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jaibhavnani/Desktop/Git/docs-info/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jaibhavnani/Desktop/Git/docs-info/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jaibhavnani/Desktop/Git/docs-info/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/jaibhavnani/Desktop/Git/docs-info/src/nova/README.md?vue&type=template&id=236d0db5&","dependencies":[{"path":"/Users/jaibhavnani/Desktop/Git/docs-info/src/nova/README.md","mtime":1619685629249},{"path":"/Users/jaibhavnani/Desktop/Git/docs-info/node_modules/cache-loader/dist/cjs.js","mtime":1619077300192},{"path":"/Users/jaibhavnani/Desktop/Git/docs-info/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1619077362344},{"path":"/Users/jaibhavnani/Desktop/Git/docs-info/node_modules/cache-loader/dist/cjs.js","mtime":1619077300192},{"path":"/Users/jaibhavnani/Desktop/Git/docs-info/node_modules/vue-loader/lib/index.js","mtime":1619077362344},{"path":"/Users/jaibhavnani/Desktop/Git/docs-info/node_modules/@vuepress/markdown-loader/index.js","mtime":1619077304147}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("h1", { attrs: { id: "nova" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#nova" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Nova")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [
          _vm._v("Nova is a "),
          _c("u", [_vm._v("set of contracts")]),
          _vm._v(" & "),
          _c("u", [_vm._v("network of bots")]),
          _vm._v(
            " that empowers users/contracts to seamlessly interact with L1 contracts + liquidity "
          ),
          _c("u", [_vm._v("without leaving L2")]),
          _vm._v(" in a trustless and "),
          _c("u", [_vm._v("composable")]),
          _vm._v(" manner.")
        ])
      ]),
      _vm._v(" "),
      _c("img", {
        staticStyle: { float: "right" },
        attrs: {
          width: "500",
          alt: "Explainer",
          src: "https://i.imgur.com/TbbAhLd.png"
        }
      }),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("p", [
            _vm._v("Users specify what actions they want run on L1 from L2")
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "Users pay a bounty which pays for the gas of execution on L1 + whatever upfront costs a bot executing on L1 needs to have."
            )
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              'Bots execute requests on L1 by calling the Nova "Execution Manager" contract with the calldata users on L2 give them.'
            )
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "The execution manager will call a specific strategy contract which can send tokens up to L2 via a bridge."
            )
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "After executing a request, the Nova Execution Manager sends a confirmation up to L2 to unlock the bounty for the bot."
            )
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "l2-novaregistry" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#l2-novaregistry" } },
          [_vm._v("#")]
        ),
        _vm._v(" L2_NovaRegistry")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'This is the "user facing" contract of Nova. Users can use this contract to '
        ),
        _c("a", { attrs: { href: "#request-execution" } }, [
          _vm._v("request execution of different strategies")
        ]),
        _vm._v(", "),
        _c("a", { attrs: { href: "#cancel-execution-request" } }, [
          _vm._v("cancel their requests")
        ]),
        _vm._v(", "),
        _c("a", { attrs: { href: "#withdraw-bounties-input-tokens" } }, [
          _vm._v("withdraw their tokens")
        ]),
        _vm._v(", and "),
        _c("a", { attrs: { href: "#bump-request-gas-price" } }, [
          _vm._v("bump the gas price of their requests")
        ]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Bots also will use this contract to "),
        _c("a", { attrs: { href: "#get-all-request-information" } }, [
          _vm._v("view the latest requests")
        ]),
        _vm._v(" and "),
        _c("a", { attrs: { href: "#complete-execution-request" } }, [
          _vm._v("receive bounties for executing requests")
        ]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "request-execution" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#request-execution" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Request execution")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("struct")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("InputToken")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _vm._v(" l1Token"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _vm._v(" l2Token"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" amount"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("struct")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Bounty")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _vm._v(" token"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" amount"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v(
                '/// @param strategy The address of the "strategy" contract on L1 a bot should call with `l1calldata`.'
              )
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v(
                "/// @param l1calldata The abi encoded calldata a bot should call the `strategy` with on L1."
              )
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v(
                "/// @param gasLimit The gas limit a bot should use on L1."
              )
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v(
                "/// @param gasPrice The gas price a bot should use on L1."
              )
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v(
                "/// @param inputTokens An array of token amounts that a bot will need on L1 to execute the request (`l1Token`s) along with the equivalent tokens that will be returned on L2 (`l2Token`s). `inputTokens` will not be awarded if the `strategy` reverts on L1."
              )
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v(
                "/// @param bounties An array of tokens that will be awarded to the bot who executes the request. Only 50% of the bounty will be paid to the bot if the `strategy` reverts on L1."
              )
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("requestExec")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _vm._v(" strategy"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bytes")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("calldata")
            ]),
            _vm._v(" l1calldata"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" gasLimit"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" gasPrice"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" InputToken"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("calldata")
            ]),
            _vm._v(" inputTokens"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" Bounty"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("calldata")
            ]),
            _vm._v(" bounties"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("public")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("returns")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bytes32")
            ]),
            _vm._v(" execHash"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "This function allows a user to request a strategy to be executed."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "It will first increment the contract's nonce which is to prevent duplicate execution requests from having the same "
        ),
        _c("code", [_vm._v("execHash")]),
        _vm._v(". The nonce is type "),
        _c("code", [_vm._v("uint72")]),
        _vm._v(
          " as it can accommodate 7,000,000,000 people requesting an execution every second for 21,000 years before overflowing."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("It will first transfer in all the "),
        _c("code", [_vm._v("InputToken")]),
        _vm._v("s and "),
        _c("code", [_vm._v("Bounty")]),
        _vm._v("s ("),
        _c("strong", [
          _vm._v(
            "all of these inputs/bounties must be approved to the registry by the caller"
          )
        ]),
        _vm._v(").")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block warning" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("WARNING")]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "The bounty is not checked to be sufficient by the registry, it is up to Nova bots to determine which requests are profitable via "
          ),
          _c("code", [_vm._v("getBounty")]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("It will then compute the "),
        _c("code", [_vm._v("execHash")]),
        _vm._v(
          " (unique identifier of this specific execution request) like so: "
        ),
        _c("code", [
          _vm._v(
            "keccak256(abi.encodePacked(nonce, strategy, l1calldata, gasPrice))"
          )
        ]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("It will then store "),
        _c("code", [_vm._v("execHash")]),
        _vm._v(
          " in a mapping and assign it to all of the arguments this function was passed."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "request-execution-with-a-timeout" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#request-execution-with-a-timeout" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Request execution with a timeout")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("requestExecWithTimeout")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _vm._v(" strategy"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bytes")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("calldata")
            ]),
            _vm._v(" l1calldata"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" gasLimit"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" gasPrice"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" InputToken"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("calldata")
            ]),
            _vm._v(" inputTokens"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" Bounty"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("calldata")
            ]),
            _vm._v(" bounties"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" autoCancelDelay"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("external")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("returns")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bytes32")
            ]),
            _vm._v(" execHash"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("Behaves exactly like "),
        _c("code", [_vm._v("requestExec")]),
        _vm._v(" but also calls "),
        _c("code", [_vm._v("cancel")]),
        _vm._v(" with "),
        _c("code", [_vm._v("autoCancelDelay")]),
        _vm._v(" automatically.")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block warning" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("WARNING")]),
        _vm._v(" "),
        _c("p", [
          _vm._v("The user will still have to call "),
          _c("code", [_vm._v("withdraw")]),
          _vm._v(" once the "),
          _c("code", [_vm._v("autoCancelDelay")]),
          _vm._v(" timeout completes.")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "This function is useful for strategies that are likely to cause hard reverts or not be executed for some reason."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "cancel-execution-request" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#cancel-execution-request" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Cancel execution request")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("cancel")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bytes32")
            ]),
            _vm._v(" execHash"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" withdrawDelaySeconds"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("public")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "This function cancels an execution request (allows a user to withdraw their tokens/bounty after a delay). "
        ),
        _c("code", [_vm._v("msg.sender")]),
        _vm._v(" must be the initiator of execution request the "),
        _c("code", [_vm._v("execHash")]),
        _vm._v(" links to.")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("TIP")]),
        _vm._v(" "),
        _c("p", [
          _vm._v("After "),
          _c("code", [_vm._v("cancel")]),
          _vm._v(" is called the user must wait "),
          _c("code", [_vm._v("withdrawDelaySeconds")]),
          _vm._v(" before calling "),
          _c("code", [_vm._v("withdraw")]),
          _vm._v(" to get their bounty, input tokens, etc back.")
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block warning" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("WARNING")]),
        _vm._v(" "),
        _c("p", [
          _c("code", [_vm._v("withdrawDelaySeconds")]),
          _vm._v(" must be >=300 (5 minutes).")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("A bot can still execute the request associated with the "),
        _c("code", [_vm._v("execHash")]),
        _vm._v(" up until the withdraw delay has passed.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("A user may call may not call "),
        _c("code", [_vm._v("cancel")]),
        _vm._v(" a second time on the same "),
        _c("code", [_vm._v("execHash")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "withdraw-bounties-input-tokens" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#withdraw-bounties-input-tokens" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Withdraw bounties/input tokens")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("withdraw")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bytes32")
            ]),
            _vm._v(" execHash"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("external")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "This function gives the request's creator their input tokens, bounty, and gas payment back."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "A user cannot call this function unless they have already called "
        ),
        _c("code", [_vm._v("cancel")]),
        _vm._v(" and waited for at least the "),
        _c("code", [_vm._v("withdrawDelaySeconds")]),
        _vm._v(" they specified when calling "),
        _c("code", [_vm._v("cancel")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "bump-request-gas-price" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#bump-request-gas-price" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Bump request gas price")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("bumpGas")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bytes32")
            ]),
            _vm._v(" execHash"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" gasPrice"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("external")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("returns")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bytes32")
            ]),
            _vm._v(" newExecHash"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _c("code", [_vm._v("bumpGas")]),
        _vm._v(
          " allows a user to increase the gas price for their execution request without having to "
        ),
        _c("code", [_vm._v("cancel")]),
        _vm._v(", "),
        _c("code", [_vm._v("withdraw")]),
        _vm._v(" and call "),
        _c("code", [_vm._v("requestExec")]),
        _vm._v(
          " again. Calling this function will initiate a 5 minute delay before disabling the request associated with "
        ),
        _c("code", [_vm._v("execHash")]),
        _vm._v(
          ' (this is known as the "uncled" request) and enabling an updated version of the request (this is known as the resubmitted request which can be found under '
        ),
        _c("code", [_vm._v("newExecHash")]),
        _vm._v(").")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block danger" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("WARNING")]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "A bot can still execute the uncled request associated with the "
          ),
          _c("code", [_vm._v("execHash")]),
          _vm._v(" up until the delay has passed.")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "If a bot executes the uncled request before the delay has passed the resubmitted request will not be executable after the delay."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "check-if-request-is-executable" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#check-if-request-is-executable" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Check if request is executable")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("isExecutable")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bytes32")
            ]),
            _vm._v(" execHash"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("public")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("view")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("returns")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bool")
            ]),
            _vm._v(" executable"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" changeTimestamp"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("Returns if the request is executable ("),
        _c("code", [_vm._v("executeable")]),
        _vm._v(") along with a timestamp of when that may change ("),
        _c("code", [_vm._v("changeTimestamp")]),
        _vm._v(").")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("TIP")]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Bots should call this function before trying to execute a request in the registry."
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The "),
        _c("code", [_vm._v("changeTimestamp")]),
        _vm._v(
          " will be timestamp indicating when the request might switch from being executable to unexecutable (or vice-versa):"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("It will be 0 if there is no change expected.")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "It will be a timestamp if the request will be enabled soon (as it's a resubmitted version of an uncled request) or the request is being canceled soon."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "get-all-request-information" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#get-all-request-information" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Get all request information")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("getRequestData")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bytes32")
            ]),
            _vm._v(" execHash"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("external")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("view")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("returns")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// General request data:")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _vm._v(" strategy"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bytes")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("memory")
            ]),
            _vm._v(" l1calldata"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" gasLimit"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" gasPrice"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n        InputToken"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("memory")
            ]),
            _vm._v(" inputTokens"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n        Bounty"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("memory")
            ]),
            _vm._v(" bounties"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// Other data:")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint72")
            ]),
            _vm._v(" nonce"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _vm._v(" creator"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bytes32")
            ]),
            _vm._v(" uncle"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// Can be fetched via `isExecutable`:")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bool")
            ]),
            _vm._v(" executable"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" changeTimestamp\n    "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("Returns all relevant data about a request by its "),
        _c("code", [_vm._v("execHash")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("The first 6 return items are the parameters passed to "),
          _c("code", [_vm._v("requestExec")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("nonce")]),
          _vm._v(
            " is the nonce assigned to this request. It is used to compute the "
          ),
          _c("code", [_vm._v("execHash")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("creator")]),
          _vm._v(" is the address which called "),
          _c("code", [_vm._v("requestExec")]),
          _vm._v(" to create this request.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("uncle")]),
          _vm._v(
            " may either be an empty bytestring or the execHash of the uncle of this transaction (the transaction that this resubmitted transaction is cloned from)."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "The last two return items are the return value s of calling "
          ),
          _c("code", [_vm._v("isExecutable")]),
          _vm._v(" with "),
          _c("code", [_vm._v("execHash")]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "complete-execution-request" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#complete-execution-request" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Complete execution request")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("execCompleted")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bytes32")
            ]),
            _vm._v(" execHash"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _vm._v(" executor"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _vm._v(" rewardRecipient"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" gasUsed"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bool")
            ]),
            _vm._v(" reverted"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("external")
            ]),
            _vm._v(" onlyXDomainMessageFromNovaExecutionManager\n")
          ])
        ])
      ]),
      _c("div", { staticClass: "custom-block danger" }, [
        _c("p", { staticClass: "custom-block-title" }, [
          _vm._v("NOT DIRECTLY CALLABLE")
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "This function can only be called via a message relayed from cross domain messenger with the L1 origin being the "
          ),
          _c("code", [_vm._v("L1_NovaExecutionManager")]),
          _vm._v(" contract.")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The "),
        _c("code", [_vm._v("execHash")]),
        _vm._v(" gets computed by the "),
        _c("code", [_vm._v("L1_NovaExecutionManager")]),
        _vm._v(" like so: "),
        _c("code", [
          _vm._v(
            "keccak256(abi.encodePacked(nonce, strategy, l1calldata, gasPrice))"
          )
        ]),
        _vm._v(" and is used to ensure the right calldata "),
        _c("strong", [_vm._v("(and gas price)")]),
        _vm._v(" was used on L1.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Once the registry verifies that the "),
        _c("code", [_vm._v("execHash")]),
        _vm._v(
          " was previously registered (meaning this execution was valid) & not disabled (via "
        ),
        _c("code", [_vm._v("isDisabled")]),
        _vm._v("):")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("p", [
            _vm._v("It will find this "),
            _c("code", [_vm._v("execHash")]),
            _vm._v(" in the registry's storage and retrieve the "),
            _c("code", [_vm._v("gasPrice")]),
            _vm._v(
              " and bounty/inputToken information associated with this execHash."
            )
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "It will first pay for the gas cost of L1 execution by calculating the ETH to send to the "
            ),
            _c("code", [_vm._v("bot")]),
            _vm._v(" using "),
            _c("code", [
              _vm._v("(gasLimit > gasUsed ? gasUsed : gasLimit) * gasPrice")
            ]),
            _vm._v(
              ". Any remaining ETH will be sent back to the user who requested execution (just like how gas is refunded on L1 if the gas limit exceeds gas used)."
            )
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v("It will then loop over all the "),
            _c("code", [_vm._v("inputTokens")]),
            _vm._v(" and transfer the "),
            _c("code", [_vm._v("amount")]),
            _vm._v(" of each "),
            _c("code", [_vm._v("l2Token")]),
            _vm._v(" to either:")
          ]),
          _vm._v(" "),
          _c("ol", [
            _c("li", [
              _vm._v("The "),
              _c("code", [_vm._v("rewardRecipient")]),
              _vm._v(" if "),
              _c("code", [_vm._v("reverted")]),
              _vm._v(" is false.")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("The request's creator if "),
              _c("code", [_vm._v("reverted")]),
              _vm._v(" is true.")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v("It will then loop over all the "),
            _c("code", [_vm._v("bounties")]),
            _vm._v(" and transfer the "),
            _c("code", [_vm._v("amount")]),
            _vm._v(" of each "),
            _c("code", [_vm._v("l2Token")]),
            _vm._v(" to the "),
            _c("code", [_vm._v("rewardRecipient")]),
            _vm._v(". "),
            _c("strong", [
              _vm._v("If "),
              _c("code", [_vm._v("reverted")]),
              _vm._v(
                " is true it will transfer 30% of the amount back to the request's creator and only 70% to the "
              ),
              _c("code", [_vm._v("rewardRecipient")]),
              _vm._v(".")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block warning" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("WARNING")]),
        _vm._v(" "),
        _c("p", [
          _vm._v("When mechanism explained in the "),
          _c("a", { attrs: { href: "#mev-extraction" } }, [
            _vm._v("#mev-extraction")
          ]),
          _vm._v(" section is implemented this function will revert if "),
          _c("code", [_vm._v("executor")]),
          _vm._v(" is not the sequencer.")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "After all the bounties/inputs have been paid out it will mark "
        ),
        _c("code", [_vm._v("execHash")]),
        _vm._v(" as executed so it cannot be executed again.")
      ]),
      _vm._v(" "),
      _c("hr"),
      _vm._v(" "),
      _c("h2", { attrs: { id: "l1-novaexecutionmanager" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#l1-novaexecutionmanager" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" L1_NovaExecutionManager")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Users on L2 never need to interact with this contract. This contract is to facilitate the execution of requests and send messages to unlock input tokens/bounties for bots/executors (post-execution)."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Strategy contracts may wish to call back into this contract to trigger a "
        ),
        _c("a", { attrs: { href: "#trigger-hard-revert" } }, [
          _vm._v("hard revert")
        ]),
        _vm._v(", "),
        _c("a", { attrs: { href: "#get-the-current-exechash" } }, [
          _vm._v("get the current execHash")
        ]),
        _vm._v(" or "),
        _c("a", { attrs: { href: "#transfer-tokens-from-the-executor" } }, [
          _vm._v("transfer tokens from the executor/bot")
        ]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "execute-request" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#execute-request" } },
          [_vm._v("#")]
        ),
        _vm._v(" Execute Request")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("exec")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint72")
            ]),
            _vm._v(" nonce"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _vm._v(" strategy"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bytes")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("memory")
            ]),
            _vm._v(" l1calldata"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" xDomainMessageGasLimit"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("public")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("This function calls the "),
        _c("code", [_vm._v("strategy")]),
        _vm._v(" address with the specified "),
        _c("code", [_vm._v("l1calldata")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The call to "),
        _c("code", [_vm._v("strategy")]),
        _vm._v(" is wrapped in a try-catch block:")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("If the call reverts and the revert message is "),
          _c("code", [_vm._v("__NOVA__HARD__REVERT__")]),
          _vm._v(", "),
          _c("strong", [
            _c("code", [_vm._v("exec")]),
            _vm._v(" will revert immediately (no message to L2 will be sent).")
          ]),
          _vm._v(" "),
          _c("ul", [
            _c("li", [
              _c("a", { attrs: { href: "#execute-request" } }, [
                _vm._v("This is called a HARD REVERT.")
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Strategy contracts should only "),
              _c("strong", [_vm._v("hard revert")]),
              _vm._v(
                " if the bot has not properly set up the execution context (like not approving the right amount input of tokens, etc)"
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "If the call reverts and the revert message is empty or is not "
          ),
          _c("code", [_vm._v("__NOVA__HARD__REVERT__")]),
          _vm._v(", "),
          _c("strong", [
            _c("code", [_vm._v("exec")]),
            _vm._v(" will continue with sending a message to L2.")
          ]),
          _vm._v(" "),
          _c("ul", [
            _c("li", [
              _c("a", { attrs: { href: "#execute-request" } }, [
                _vm._v("This is called a SOFT REVERT.")
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("If a strategy "),
              _c("strong", [_vm._v("soft reverts")]),
              _vm._v(", the "),
              _c("code", [_vm._v("inputTokens")]),
              _vm._v(" for the request will "),
              _c("strong", [_vm._v("not be sent")]),
              _vm._v(" to the bot and "),
              _c("strong", [_vm._v("only 70% of the bounty")]),
              _vm._v(" will be sent (instead of the usual 100%). The "),
              _c("strong", [_vm._v("30% bounty penalty")]),
              _vm._v(
                " is to prevent bots from attempting to cause or wait for soft reverts and "
              ),
              _c("strong", [_vm._v("act in good faith")]),
              _vm._v(" instead.")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The "),
        _c("code", [_vm._v("nonce")]),
        _vm._v(" argument is used to compute the "),
        _c("code", [_vm._v("execHash")]),
        _vm._v(" needed to unlock the bounty for this strategy on L2.")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("TIP")]),
        _vm._v(" "),
        _c("p", [
          _vm._v("Bots cannot call "),
          _c("code", [_vm._v("exec")]),
          _vm._v(" with arguments that produce an "),
          _c("code", [_vm._v("execHash")]),
          _vm._v(" which has previously been successfuly executed.")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The "),
        _c("code", [_vm._v("xDomainMessageGasLimit")]),
        _vm._v(
          " is used to determine the gas limit used for the cross domain call to "
        ),
        _c("code", [_vm._v("execCompleted")]),
        _vm._v(". "),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://github.com/ethereum-optimism/contracts/blob/master/contracts/optimistic-ethereum/OVM/chain/OVM_CanonicalTransactionChain.sol#L42",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _vm._v(
              "A fraction of this gas limit (currently 1/32nd) is consumed by the call to "
            ),
            _c("code", [_vm._v("sendMessage")]),
            _c("OutboundLink")
          ],
          1
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "All computation in the function leading up to the cross domain message is sandwiched between calls to "
        ),
        _c("code", [_vm._v("gasLeft()")]),
        _vm._v(
          ". These are used to calculate how many gas units the bot had to pay for (so the registry can "
        ),
        _c("strong", [_vm._v("release the proper bounty")]),
        _vm._v(" on L2). Calculating "),
        _c("code", [_vm._v("gasUsed")]),
        _vm._v(
          " is not as simple as the difference between the starting gasLeft value and the final one as we "
        ),
        _c("strong", [
          _vm._v(
            "have to account for constant function-call gas and the costs associated with sending a cross domain message."
          )
        ]),
        _vm._v(
          " Psuedocode for implementing these gas calculations is shown below:"
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" startGas "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("gasleft")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v(" call the strategy"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" etc "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v(
                "// Psuedocode estimates for computing how much the `sendMessage` call will cost."
              )
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" xDomainMessageGas "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("48")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("*")
            ]),
            _vm._v(" xDomainCalldata"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("length"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("+")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("xDomainMessageGasLimit "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("/")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("32")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("+")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("74000")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v(
                "// (Constant function call gas) + (Gas diff after calls) + (the amount of gas that will be burned via enqueue + storage/other message overhead)"
              )
            ]),
            _vm._v("\ngasUsed "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("21396")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("+")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("startGas "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("-")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("gasleft")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("+")
            ]),
            _vm._v(" xDomainMessageGas"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v(" send cross domain message "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("After the call to "),
        _c("code", [_vm._v("strategy")]),
        _vm._v(" is completed, the EM will compute the "),
        _c("code", [_vm._v("execHash")]),
        _vm._v(" it needs (using the arguments passed into "),
        _c("code", [_vm._v("exec")]),
        _vm._v(" along with the "),
        _c("code", [_vm._v("tx.gasprice")]),
        _vm._v(") and "),
        _c("strong", [_vm._v("send a cross domain message")]),
        _vm._v(" to call the "),
        _c("code", [_vm._v("L2_NovaRegistry")]),
        _vm._v("'s "),
        _c("code", [_vm._v("execCompleted")]),
        _vm._v(" with the neccessary arguments. This will send the "),
        _c("code", [_vm._v("inputTokens")]),
        _vm._v("/"),
        _c("code", [_vm._v("bounties")]),
        _vm._v(" to the caller of "),
        _c("code", [_vm._v("exec")]),
        _vm._v(" on L2.")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("execWithRecipient")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint72")
            ]),
            _vm._v(" nonce"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _vm._v(" strategy"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bytes")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("calldata")
            ]),
            _vm._v(" l1calldata"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" xDomainMessageGasLimit"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _vm._v(" l2Recipient"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("external")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("Behaves like "),
        _c("code", [_vm._v("exec")]),
        _vm._v(" but tells the "),
        _c("code", [_vm._v("L2_NovaRegistry")]),
        _vm._v(" contract to send the "),
        _c("code", [_vm._v("inputTokens")]),
        _vm._v("/"),
        _c("code", [_vm._v("bounties")]),
        _vm._v(" to the "),
        _c("code", [_vm._v("l2Recipient")]),
        _vm._v(
          " on L2 (instead of specifically the bot who calls the function)."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "trigger-hard-revert" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#trigger-hard-revert" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Trigger Hard Revert")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("hardRevert")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("external")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("Convenience function that simply runs "),
        _c("code", [_vm._v('revert("__NOVA__HARD__REVERT__")')]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "get-the-current-exechash" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#get-the-current-exechash" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Get The Current ExecHash")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("currentExecHash")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("external")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("view")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("returns")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("bytes32")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "This function returns the execHash computed from the current call to "
        ),
        _c("code", [_vm._v("exec")]),
        _vm._v(
          ". Strategy contracts may wish to call this function to send messages up to L2 with and tag them with the current execHash."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "get-the-current-executor" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#get-the-current-executor" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Get The Current Executor")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("currentExecutor")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("external")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("view")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("returns")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          'This function returns the current "executor" (address that made the current call to '
        ),
        _c("code", [_vm._v("exec")]),
        _vm._v(
          "). Strategy contrats may wish to call this function to ensure only a trusted party is able to execute the strategy or to release additional rewards for the executor, etc."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "transfer-tokens-from-the-executor" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#transfer-tokens-from-the-executor" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Transfer Tokens From The Executor")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("transferFromExecutor")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _vm._v(" token"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" amount"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("external")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "This function transfers tokens the calling bot (the account that called "
        ),
        _c("code", [_vm._v("execute")]),
        _vm._v(
          ") has approved to the execution manager to the currently executing "
        ),
        _c("code", [_vm._v("strategy")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block danger" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("WARNING")]),
        _vm._v(" "),
        _c("p", [
          _vm._v("Only the currently executing "),
          _c("code", [_vm._v("strategy")]),
          _vm._v(" can call this function.")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("This function will trigger a "),
        _c("a", { attrs: { href: "#execute-request" } }, [
          _vm._v("HARD REVERT")
        ]),
        _vm._v(
          " if the bot executing the current strategy has not approved at least "
        ),
        _c("code", [_vm._v("amount")]),
        _vm._v(" of "),
        _c("code", [_vm._v("token")]),
        _vm._v(" to the "),
        _c("code", [_vm._v("L1_NovaExecutionManager")]),
        _vm._v(" (like "),
        _c("code", [_vm._v("safeTransferFrom")]),
        _vm._v(").")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "example-integration-s" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#example-integration-s" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Example Integration(s)")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "uniswap-sushiswap" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#uniswap-sushiswap" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Uniswap/Sushiswap")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("To integrate "),
        _c("strong", [_vm._v("Uniswap/Sushiswap")]),
        _vm._v(
          " we only need to write one custom contract (a Strategy contract on L1)."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "This strategy would have all the same methods as the Uniswap router has"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("The "),
          _c("code", [_vm._v("to")]),
          _vm._v(
            " parameter of the strategy's methods would be hijacked and not passed into the Uniswap router.\n"
          ),
          _c("ul", [
            _c("li", [
              _vm._v("The "),
              _c("code", [_vm._v("to")]),
              _vm._v(
                " param will be used as the recipient of the tokens on L2."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "The Uniswap router will be told to send the output tokens back to the "
              ),
              _c("code", [_vm._v("Nova_UniswapStrategy")]),
              _vm._v(" contract (so it can send them up to L2 via the bridge)")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Each of the methods would require that a bot approve the tokens necessary for the swap to the "
          ),
          _c("code", [_vm._v("L1_NovaExecutionManager")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("The method would call "),
          _c("code", [_vm._v("transferFromBot")]),
          _vm._v(
            " to get the input tokens from the bot and then perform the corresponding method call on the Uniswap router."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "The method would then send the output tokens through an Optimism token bridge to the "
          ),
          _c("code", [_vm._v("to")]),
          _vm._v(" address.")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [
          _vm._v(
            "Here's what one of those wrapped router functions in the Strategy contract would look like:"
          )
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-solidity extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-solidity" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("swapExactTokensForTokens")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" amountIn"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" amountOutMin"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("calldata")
            ]),
            _vm._v(" path"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _vm._v(" to"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" deadline\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("external")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n    ERC20 input "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("ERC20")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("path"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n    ERC20 output "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("ERC20")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("path"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _vm._v("path"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("length "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("-")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("1")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n    "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// Transfer in tokens from the bot.")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("L1_NovaExecutionManager")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("msg"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("sender"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("transferFromBot")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("input"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" amountIn"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n    "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// Approve the input tokens to the uniswapRouter")
            ]),
            _vm._v("\n    input"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("approve")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("uniswapRouter"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" amountIn"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n    "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// Perform the swap")
            ]),
            _vm._v("\n    uniswapRouter"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("swapExactTokensForTokens")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("\n        amountIn"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n        amountOutMin"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n        path"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("this")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n        deadline\n    "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("uint256")
            ]),
            _vm._v(" outputAmount "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" output"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("balanceOf")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("this")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n    "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// Approve the output tokens to the token bridge")
            ]),
            _vm._v("\n    output"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("approve")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("optimismTokenBridge"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" outputAmount"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v(
                "// Send the tokens up to L2 with the recipient being the `to` param"
              )
            ]),
            _vm._v("\n    optimismTokenBridge"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("depositAsERC20")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("address")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("output"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" to"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" outputAmount"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("h2", { attrs: { id: "future-mev-extraction-mechanism" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#future-mev-extraction-mechanism" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Future MEV Extraction Mechanism")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block danger" }, [
        _c("p", { staticClass: "custom-block-title" }, [
          _vm._v("NOT IMPLEMENTED (YET)")
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "The mechanism explained below is not currently implemented, but will be in a future iteration of Nova."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "background" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#background" } },
          [_vm._v("#")]
        ),
        _vm._v(" Background")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'An important property of Nova is that it is censorship resistant. There is no single "operator" who can execute requests, anyone is free to. Having a competitive landscape of different bots filling orders is important to ensure users can always get their execution requests filled and they are never censored.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "However, considering that many of these requests will come with a bounty that is profitable beyond the maximum gas it takes to execute them, it is natural for multiple bots to engage in PGAs to extract profit from as many strategies that they can."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The profits from these PGAs don't go to the Nova platform or users who request execution, they go to "
        ),
        _c("strong", [_vm._v("miners")]),
        _vm._v(" who contribute no value to the protocol.")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "mev-auctions-meva" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#mev-auctions-meva" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" MEV Auctions (MEVA)")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'We can extract the value that would have gone to miners by auctioning off "priority rights" to execute requests for specific strategies (this is also known as a '
        ),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://ethresear.ch/t/mev-auction-auctioning-transaction-ordering-rights-as-a-solution-to-miner-extractable-value/6788",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("MEVA"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          "). Each strategy will have its own sequencer (bot with priority rights) to prevent a sequencer from potentially ignoring a strategy that their bot is not capable of fulfilling executions for. The auctions will function like so:"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Every X hours (configurable) anyone would be able to call "),
          _c("code", [_vm._v("function triggerAuction(address strategy)")]),
          _vm._v(" on the "),
          _c("code", [_vm._v("L2_NovaRegistry")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("From there a 5-minute auction would be initiated")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Every bid must be at least 20% greater than the previous bid")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "If there is a new bid within the last 1 minute of the auction, the auction timer is extended by 1 minute"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "During this 1 minute period the next bid must be at least 40% greater than the previous bid"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "If there is another bid in this 1 minute then another 1 minute is added to the timer with the same 40% bid difference requirement "
          ),
          _c("strong", [
            _vm._v(
              "(this repeats until there are no bids in a 1 minute period)"
            )
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "The auction winner's bid is taken by the system while all other bids are sent back to their respective bidders."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'The winner is given ownership of an NFT (known as the "priority key") that they can transfer around at will.'
          )
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("TIP")]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            'The owner of the priority key for each strategy will from here on be referred to as a strategy\'s "sequencer".'
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The strategy's sequencer is given a Y (configurable) minute window where "
        ),
        _c("strong", [_vm._v("only they")]),
        _vm._v(
          " can execute that specific strategy. Any other bot performing an execution for a strategy during its \"sequencer window\" will not receive the execution request's bounty (the strategy's sequencer will)."
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("TIP")]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "After the Y minute window expires for the request any bot is free to execute requests and receive the full bounty."
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Users will be able to opt out of giving the strategy sequencer priority when requesting an execution (but will pay a small penalty)."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "sequencer-extractable-value" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#sequencer-extractable-value" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Sequencer Extractable Value")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "This system not only extracts PGA profits that would have gone to miners, but they are also able to "
        ),
        _c("strong", [_vm._v("extract other frontrunning profits")]),
        _vm._v(" that would have gone to sandwich bots, etc.")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("The sequencer effectively has the rights to "),
          _c("strong", [_vm._v("reorder transactions")]),
          _vm._v(" within that 1 minute window")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Importantly, "),
          _c("strong", [_vm._v("they can insert their own transactions")]),
          _vm._v(
            " inbetween/around them as part of an atomic bundle (via something like a DSProxy)."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Atomic insertion and reoreding rights allow them to take advantage of frontrunning schemes like sandwich attacks without miner/other bot competition."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Bots bidding in auctions for different strategies will price-in the frontrunning profits they estimate they can extract and adjust their bid accordingly.\n"
          ),
          _c("ul", [
            _c("li", [
              _c("strong", [
                _vm._v(
                  "Since the profits from these auctions go to the protocol, we have effectively extracted MEV profits that miners/frontrunning bots could have made off of Nova users and brought it back to the protocol instead."
                )
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("em", [
                _vm._v(
                  "We can even redistribute the profits we earn from MEVA back to users as a way to reduce costs!"
                )
              ])
            ])
          ])
        ])
      ])
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}